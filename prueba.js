/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var prueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,27],$V2=[1,43],$V3=[1,28],$V4=[1,29],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,26],$V9=[1,30],$Va=[1,22],$Vb=[1,23],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[2,5,23,24,28,29,30,32,38,39,40,54,55,56,60,61,62,63,64,65,83,92,93,94,95,96],$Vp=[2,5,22,23,24,26,28,29,30,32,35,38,39,40,54,55,56,60,61,62,63,64,65,83,92,93,94,95,96],$Vq=[1,59],$Vr=[50,58],$Vs=[2,78],$Vt=[1,61],$Vu=[1,63],$Vv=[1,64],$Vw=[24,26,27,83,92,93,94,95,96],$Vx=[22,24,26,35,50,58,75,76,78,79,80,81,83,90],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[22,24,26,35,50,58,75,76,78,79,80,81,83,84,86,87,88,90],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,93],$VM=[22,26,35],$VN=[1,133],$VO=[1,134],$VP=[1,138],$VQ=[1,137],$VR=[1,135],$VS=[1,136],$VT=[22,26,35,76,78],$VU=[26,50],$VV=[2,5,22,23,24,26,28,29,30,32,35,38,39,40,54,55,56,60,61,62,63,64,65,67,68,69,70,71,72,73,75,83,92,93,94,95,96],$VW=[1,228],$VX=[34,37],$VY=[2,5,22,23,24,26,28,29,30,32,35,38,39,40,42,43,54,55,56,60,61,62,63,64,65,83,92,93,94,95,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"IMPRIMIR":8,"IMPRIMIRLN":9,"ASIGNACION":10,"METODO":11,"FUNCION":12,"METODOsp":13,"FUNCIONsp":14,"CONDICIONIF":15,"CICLO":16,"RETURN":17,"CALL":18,"SWITCH":19,"BREAK":20,"CONTINUE":21,";":22,"pr_for":23,"(":24,"ETS":25,")":26,"{":27,"}":28,"pr_while":29,"pr_do":30,"pr_until":31,"pr_switch":32,"OPCIONES":33,"pr_default":34,":":35,"OPCION":36,"pr_case":37,"pr_break":38,"pr_continue":39,"pr_if":40,"IFANIDADOS":41,"pr_elif":42,"pr_else":43,"E":44,"PARAMETROS":45,"TIPODATO_DECLARACION":46,"BLOQUE":47,"pr_void":48,"PARS":49,",":50,"PAR":51,"PARAMETROSLL":52,"PARSLL":53,"pr_return":54,"pr_print":55,"pr_println":56,"IDS":57,"=":58,"TIPO_DECLARACION_CONST":59,"pr_const":60,"pr_numero":61,"pr_bool":62,"pr_string":63,"pr_double":64,"pr_char":65,"DECLARACION_INTERNA":66,"pr_TL":67,"pr_TU":68,"pr_round":69,"pr_len":70,"pr_typeof":71,"pr_TS":72,"pr_TCA":73,"COMPARACIONES":74,"!":75,"&&":76,"COMP":77,"||":78,"<":79,">":80,"+":81,"Term":82,"-":83,"*":84,"Factor":85,"/":86,"%":87,"^":88,"[":89,"]":90,"F":91,"expreR_numero":92,"expreR_bool":93,"expreR_cadena":94,"expreR_cadenita":95,"id":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:";",23:"pr_for",24:"(",26:")",27:"{",28:"}",29:"pr_while",30:"pr_do",31:"pr_until",32:"pr_switch",34:"pr_default",35:":",37:"pr_case",38:"pr_break",39:"pr_continue",40:"pr_if",42:"pr_elif",43:"pr_else",47:"BLOQUE",48:"pr_void",50:",",54:"pr_return",55:"pr_print",56:"pr_println",58:"=",60:"pr_const",61:"pr_numero",62:"pr_bool",63:"pr_string",64:"pr_double",65:"pr_char",67:"pr_TL",68:"pr_TU",69:"pr_round",70:"pr_len",71:"pr_typeof",72:"pr_TS",73:"pr_TCA",75:"!",76:"&&",78:"||",79:"<",80:">",81:"+",83:"-",84:"*",86:"/",87:"%",88:"^",89:"[",90:"]",92:"expreR_numero",93:"expreR_bool",94:"expreR_cadena",95:"expreR_cadenita",96:"id"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[16,10],[16,10],[16,7],[16,9],[16,9],[19,12],[33,2],[33,1],[36,6],[20,2],[21,2],[15,7],[15,8],[41,8],[41,5],[41,7],[41,4],[12,7],[11,7],[11,5],[45,3],[49,3],[49,1],[51,2],[52,3],[53,3],[53,1],[14,8],[13,8],[13,6],[17,5],[17,4],[18,3],[18,4],[8,5],[9,5],[10,4],[59,1],[46,1],[46,1],[46,1],[46,1],[46,1],[7,6],[7,5],[66,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,1],[25,1],[25,1],[57,3],[57,1],[74,4],[74,3],[74,3],[74,1],[77,3],[77,4],[77,4],[77,3],[77,4],[77,4],[44,3],[44,3],[44,2],[44,1],[82,3],[82,3],[82,3],[82,5],[82,1],[85,3],[85,1],[91,1],[91,1],[91,1],[91,1],[91,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
  console.log("s ")
break;
case 3:
 console.log("s ") 
break;
case 4:
 console.log("reconocio declaracion ") 
break;
case 5:
 console.log("reconocio PRINT ") 
break;
case 6:
 console.log("reconocio PRINTLN ") 
break;
case 7:
 console.log("reconocio asignacion ") 
break;
case 8:
  console.log("reconocio metodo")
break;
case 9:
 console.log("reconocio funcion") 
break;
case 10:
  console.log("reconocio metodo sin parametros")
break;
case 11:
 console.log("reconocio funcion sin parametros") 
break;
case 12:
 console.log("reconocio condicion if") 
break;
case 13:
console.log("reconocio  ciclo")
break;
case 14:
console.log("reconocio  RETURN")
break;
case 15:
console.log("reconocio  LLAMADA")
break;
case 16:
console.log("reconocio sentencia SWITCH")
break;
case 17:
console.log("reconocio sentencia BREAK")
break;
case 18:
console.log("reconocio sentencia CONTINUE")
break;
case 19:
 console.log("Error sintactico en la linea"+(yylineno+1)); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{1:[3]},{2:$V0,5:[1,50],6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vo,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),{22:[1,52]},{46:53,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{24:$V2,44:55,57:54,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:[1,56]},{24:[1,57]},{50:$Vq,58:[1,58]},o($Vr,$Vs,{45:60,52:62,24:$Vt,81:$Vu,83:$Vv}),{24:[1,65]},{24:[1,66]},{24:[1,67]},{27:[1,68]},{24:[1,69]},{24:[1,70]},{22:[1,71]},{22:[1,72]},o([61,62,63,64,65],[2,57]),o($Vw,[2,58]),o($Vw,[2,59]),o($Vw,[2,60]),o($Vw,[2,61]),o($Vw,[2,62]),{24:$V2,82:73,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vx,[2,92],{84:$Vy,86:$Vz,87:$VA,88:$VB}),o($VC,[2,97]),{24:$V2,44:78,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($VC,[2,99]),o($VC,[2,100]),o($VC,[2,101]),o($VC,[2,102]),o($VC,[2,103]),o($VC,[2,104]),{1:[2,1]},o($Vo,[2,2]),o($Vp,[2,19]),{24:$V2,44:55,57:79,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{50:$Vq,58:[1,80]},o($Vr,$Vs,{81:$Vu,83:$Vv}),{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:81,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:95,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:96,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:97,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{27:[1,99],35:[1,98]},{24:$V2,26:[1,100],44:104,46:105,49:101,51:103,53:102,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{22:[1,106]},{24:$V2,82:107,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,82:108,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:109,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{7:110,10:111,24:$V2,44:55,46:21,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:112,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:114,26:[1,115],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:116,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,29]),o($Vp,[2,30]),o($Vx,[2,91],{84:$Vy,86:$Vz,87:$VA,88:$VB}),{24:$V2,85:117,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,85:118,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,85:119,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{89:[1,120]},{26:[1,121],81:$Vu,83:$Vv},{50:$Vq,58:[1,122]},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:123,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,124]},{24:$V2,44:78,46:125,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:[1,126]},{24:[1,127]},{24:[1,128]},{24:[1,129]},{24:[1,130]},{24:[1,131]},{24:[1,132]},o($VM,[2,74],{76:$VN,78:$VO}),o([22,26,35,50],[2,75],{45:60,52:62,24:$Vt,58:$VP,75:$VQ,79:$VR,80:$VS,81:$Vu,83:$Vv}),o($VM,[2,76]),{24:[1,139]},o($VT,[2,82]),{26:[1,140]},{22:[1,141]},o($Vr,[2,77],{81:$Vu,83:$Vv}),{46:143,48:[1,142],61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{2:$V0,4:144,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{22:[1,147],27:[1,146],35:[1,145]},{26:[1,148],50:[1,149]},{26:[1,150],50:[1,151]},o($VU,[2,42]),o($VU,[2,46],{81:$Vu,83:$Vv}),{24:$V2,44:152,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,52]),o($Vx,[2,89],{84:$Vy,86:$Vz,87:$VA,88:$VB}),o($Vx,[2,90],{84:$Vy,86:$Vz,87:$VA,88:$VB}),{26:[1,153]},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:154,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:155,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,156]},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,157],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,158]},{22:[1,159]},{26:[1,160]},o($VC,[2,93]),o($VC,[2,94]),o($VC,[2,95]),{24:$V2,44:161,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($VC,[2,98]),{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:162,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{22:[1,163]},{22:[1,164]},{26:[1,165]},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:166,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:167,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:168,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:169,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:170,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:171,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:172,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:174,77:173,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:174,77:175,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:176,58:[1,177],82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:179,58:[1,178],82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{58:[1,180]},{58:[1,181]},{24:$V2,44:174,74:182,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{22:[1,183]},o($VV,[2,56]),{27:[1,184]},{27:[1,185]},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,186],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{46:188,48:[1,187],61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{2:$V0,4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,53]),o([27,35],[2,40]),{46:105,51:190,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{22:[2,44]},{24:$V2,44:191,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($VU,[2,43],{81:$Vu,83:$Vv}),{27:[1,192]},{22:[1,193]},{22:[1,194]},{27:[1,195]},{29:[1,196],31:[1,197]},{22:[1,198]},o($Vp,[2,51]),{27:[1,199]},{81:$Vu,83:$Vv,90:[1,200]},{22:[1,201]},o($VV,[2,64]),o($Vp,[2,54]),{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:202,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,203]},{26:[1,204]},{26:[1,205]},{26:[1,206]},{26:[1,207]},{26:[1,208]},{26:[1,209]},o($VT,[2,80]),{58:$VP,75:$VQ,79:$VR,80:$VS,81:$Vu,83:$Vv},o($VT,[2,81]),o($VT,[2,83],{81:$Vu,83:$Vv}),{24:$V2,44:210,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:211,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($VT,[2,86],{81:$Vu,83:$Vv}),{24:$V2,44:212,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:$V2,44:213,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,214],76:$VN,78:$VO},o($Vp,[2,55]),{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{47:[1,216]},o($Vp,[2,39]),{27:[1,217]},{27:[1,218]},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,219],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($VU,[2,41]),o($VU,[2,45],{81:$Vu,83:$Vv}),{2:$V0,4:220,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{10:221,24:$V2,44:55,57:24,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{10:222,24:$V2,44:55,57:24,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:223,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{24:[1,224]},{24:[1,225]},o($Vp,[2,50]),{33:226,36:227,37:$VW},o($VC,[2,96]),o($VV,[2,63]),o($VM,[2,66]),o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,69]),o($VM,[2,70]),o($VM,[2,71]),o($VM,[2,72]),o($VM,[2,73]),o($VT,[2,85],{81:$Vu,83:$Vv}),o($VT,[2,84],{81:$Vu,83:$Vv}),o($VT,[2,87],{81:$Vu,83:$Vv}),o($VT,[2,88],{81:$Vu,83:$Vv}),o($VT,[2,79]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,229],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{28:[1,230]},{2:$V0,4:231,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:232,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,49]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,233],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,234]},{26:[1,235]},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,236],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:237,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:238,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{34:[1,239],36:240,37:$VW},o($VX,[2,27]),{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:241,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,38]),o($Vp,[2,37]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,242],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,243],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,31],{41:244,42:[1,245],43:[1,246]}),{27:[1,247]},{27:[1,248]},o($Vp,[2,22]),{26:[1,249]},{26:[1,250]},{35:[1,251]},o($VX,[2,26]),{35:[1,252]},o($Vp,[2,48]),o($Vp,[2,47]),o($Vp,[2,32],{42:[1,253],43:[1,254]}),{24:[1,255]},{27:[1,256]},{2:$V0,4:257,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:258,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{22:[1,259]},{22:[1,260]},{27:[1,261]},{27:[1,262]},{24:[1,263]},{27:[1,264]},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:265,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:266,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,267],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,268],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,23]),o($Vp,[2,24]),{2:$V0,4:269,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:270,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:92,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$VD,25:271,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:91,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:90,75:$VL,77:94,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,4:272,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,273]},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,274],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,20]),o($Vp,[2,21]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,275],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,276],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{26:[1,277]},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,278],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{27:[1,279]},o($VY,[2,36]),{28:[1,280]},o($VX,[2,28]),{27:[1,281]},o($VY,[2,34]),{2:$V0,4:282,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($Vp,[2,25]),{2:$V0,4:283,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,284],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V1,24:$V2,28:[1,285],29:$V3,30:$V4,32:$V5,38:$V6,39:$V7,40:$V8,44:25,46:21,54:$V9,55:$Va,56:$Vb,57:24,59:20,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,82:41,83:$Vi,85:42,91:44,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn},o($VY,[2,35]),o($VY,[2,33])],
defaultActions: {50:[2,1],150:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    //const {Declaracion} = require('./instrucciones/declaracion.js');
    //const {Asignacion} = require('./instrucciones/asignar.js');
    //const {Literal} = require('./expresiones/literal.js')
    //const {Type} = require('./symbols/type.js');
    //const {Arithmetic} = require('./expresiones/aritmeticas.js');
    //const {Acceso} = require('./expresiones/Acceso.js');
    //const {AritmeticOption} = require('./expresiones/aritmeticOption.js');
    //const {Bloque} = require('./instrucciones/Env')
    //const {Imprimir} = require('./instrucciones/imprimir')
   //const {Sentencia_if} = require('./instrucciones/condicionIf')
    //const {metodo} = require('./instrucciones/metodo')
    //const {llamada} = require('./instrucciones/llamada')
    //const { RelacionalOption } = require("./expresiones/relacionalOptions.js");
    //const { Relacional } = require("./expresiones/relacional.js");
    var array_erroresLexicos;
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 92
break;
case 4:return 94
break;
case 5:return 93
break;
case 6:return 95
break;
case 7:return 'pr_var'
break;
case 8:return 'pr_let'
break;
case 9:return 60
break;
case 10:return 61
break;
case 11:return 64
break;
case 12:return 65
break;
case 13:return 63
break;
case 14:return 62
break;
case 15:return 55
break;
case 16:return 56
break;
case 17:return 54
break;
case 18:return 29
break;
case 19:return 32
break;
case 20:return 23
break;
case 21:return 30
break;
case 22:return 40
break;
case 23:return 43
break;
case 24:return 42
break;
case 25:return 38
break;
case 26:return 48
break;
case 27:return 'pr_call'
break;
case 28:return 71
break;
case 29:return 37
break;
case 30:return 34
break;
case 31:return 31
break;
case 32:return 39
break;
case 33:return 67
break;
case 34:return 68
break;
case 35:return 69
break;
case 36:return 70
break;
case 37:return 72
break;
case 38:return 73
break;
case 39:return 22 
break;
case 40:return 58
break;
case 41:return 35 
break;
case 42:return 81 
break;
case 43:return 83 
break;
case 44:return 84 
break;
case 45:return 86 
break;
case 46:return 50
break;
case 47:return 27 
break;
case 48:return 28 
break;
case 49:return 26 
break;
case 50:return 24 
break;
case 51:return 79
break;
case 52:return 80
break;
case 53:return 78
break;
case 54:return 76
break;
case 55:return 88
break;
case 56:return 75
break;
case 57:return 87
break;
case 58:return '<='
break;
case 59:return '>='
break;
case 60:return '=='
break;
case 61:return '!='
break;
case 62:return 89
break;
case 63:return 90
break;
case 64:return 96;
break;
case 65:return 5
break;
case 66: 
        console.log("error lexico :"+yy_.yytext)
        //push para array errores
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+\.?[0-9]*))/i,/^(?:("[^\"]*"))/i,/^(?:(true|false\b))/i,/^(?:('[^']*'))/i,/^(?:var\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:break\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:typeof\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:;)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\))/i,/^(?:\()/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = prueba;
exports.Parser = prueba.Parser;
exports.parse = function () { return prueba.parse.apply(prueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}