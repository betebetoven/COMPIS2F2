/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var prueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,27],$V2=[1,28],$V3=[1,29],$V4=[1,31],$V5=[1,25],$V6=[1,32],$V7=[1,33],$V8=[1,26],$V9=[1,30],$Va=[1,22],$Vb=[1,23],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[2,5,25,30,31,32,34,35,41,42,43,56,57,58,63,64,65,66,67],$Vi=[1,45],$Vj=[2,72],$Vk=[1,54],$Vl=[1,52],$Vm=[1,49],$Vn=[1,70],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,74],$VA=[2,75],$VB=[1,78],$VC=[1,79],$VD=[1,89],$VE=[19,26,28,29,35,38,51,60,63,64,65,66,67,69,70,72,73,75,76,77,79,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97],$VF=[1,98],$VG=[1,92],$VH=[1,93],$VI=[1,97],$VJ=[1,95],$VK=[1,96],$VL=[19,26,28,35,38,51,60,63,64,65,66,67,69,70,72,73,75,76,77,79,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97],$VM=[19,26,28,35,38,51,60,63,64,65,66,67,69,70,72,73,75,76,77,85,87,88,89,90,91,92,93,94,95,96,97],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[2,102],$VT=[2,112],$VU=[1,114],$VV=[1,115],$VW=[1,116],$VX=[19,51,60],$VY=[19,28,38,51,73,75,79,81,82,83,85],$VZ=[2,57],$V_=[28,51],$V$=[1,167],$V01=[1,208],$V11=[1,216],$V21=[37,40],$V31=[2,5,25,30,31,32,34,35,41,42,43,45,46,56,57,58,63,64,65,66,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"IMPRIMIR":8,"IMPRIMIRLN":9,"ASIGNACION":10,"METODO":11,"FUNCION":12,"METODOsp":13,"FUNCIONsp":14,"CONDICIONIF":15,"CICLO":16,"RETURN":17,"CALL":18,";":19,"SWITCH":20,"BREAK":21,"CONTINUE":22,"AUMENTO":23,"INSTANCIA":24,"pr_for":25,"(":26,"ETS":27,")":28,"{":29,"}":30,"pr_while":31,"pr_do":32,"pr_until":33,"pr_switch":34,"id":35,"OPCIONES":36,"pr_default":37,":":38,"OPCION":39,"pr_case":40,"pr_break":41,"pr_continue":42,"pr_if":43,"IFANIDADOS":44,"pr_elif":45,"pr_else":46,"PARAMETROS":47,"TIPODATO_DECLARACION":48,"pr_void":49,"PARS":50,",":51,"PAR":52,"PARAMETROSLL":53,"PARSLL":54,"E":55,"pr_return":56,"pr_print":57,"pr_println":58,"IDS":59,"=":60,"TIPO_DECLARACION_CONST":61,"pr_const":62,"pr_numero":63,"pr_bool":64,"pr_string":65,"pr_double":66,"pr_char":67,"DECLARACION_INTERNA":68,"+":69,"-":70,"COMPARACIONES":71,"!":72,"&&":73,"COMP":74,"||":75,"<":76,">":77,"Term":78,"*":79,"Factor":80,"/":81,"%":82,"^":83,"[":84,"]":85,"F":86,"expreR_numero":87,"expreR_bool":88,"expreR_cadena":89,"expreR_cadenita":90,"pr_TL":91,"pr_TU":92,"pr_round":93,"pr_len":94,"pr_typeof":95,"pr_TS":96,"pr_TCA":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:";",25:"pr_for",26:"(",28:")",29:"{",30:"}",31:"pr_while",32:"pr_do",33:"pr_until",34:"pr_switch",35:"id",37:"pr_default",38:":",40:"pr_case",41:"pr_break",42:"pr_continue",43:"pr_if",45:"pr_elif",46:"pr_else",49:"pr_void",51:",",56:"pr_return",57:"pr_print",58:"pr_println",60:"=",62:"pr_const",63:"pr_numero",64:"pr_bool",65:"pr_string",66:"pr_double",67:"pr_char",69:"+",70:"-",72:"!",73:"&&",75:"||",76:"<",77:">",79:"*",81:"/",82:"%",83:"^",84:"[",85:"]",87:"expreR_numero",88:"expreR_bool",89:"expreR_cadena",90:"expreR_cadenita",91:"pr_TL",92:"pr_TU",93:"pr_round",94:"pr_len",95:"pr_typeof",96:"pr_TS",97:"pr_TCA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[16,10],[16,10],[16,10],[16,10],[16,7],[16,9],[16,9],[20,12],[36,2],[36,1],[39,6],[21,2],[22,2],[15,7],[15,8],[44,8],[44,5],[44,7],[44,4],[12,7],[11,7],[11,5],[47,3],[50,3],[50,1],[52,2],[53,3],[54,3],[54,1],[14,8],[13,8],[13,6],[17,5],[17,4],[18,2],[18,3],[8,3],[9,3],[10,4],[61,1],[48,1],[48,1],[48,1],[48,1],[48,1],[7,4],[24,2],[68,4],[23,3],[23,3],[27,0],[27,1],[59,3],[59,1],[71,4],[71,3],[71,3],[71,1],[74,3],[74,4],[74,4],[74,3],[74,4],[74,4],[55,3],[55,3],[55,2],[55,1],[55,1],[78,3],[78,3],[78,3],[78,5],[78,1],[80,3],[80,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,1],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
  console.log("s ")
break;
case 3:
 console.log("s ") 
break;
case 4:
 console.log("reconocio declaracion ") 
break;
case 5:
 console.log("reconocio PRINT ") 
break;
case 6:
 console.log("reconocio PRINTLN ") 
break;
case 7:
 console.log("reconocio asignacion ") 
break;
case 8:
  console.log("reconocio metodo")
break;
case 9:
 console.log("reconocio funcion") 
break;
case 10:
  console.log("reconocio metodo sin parametros")
break;
case 11:
 console.log("reconocio funcion sin parametros") 
break;
case 12:
 console.log("reconocio condicion if") 
break;
case 13:
console.log("reconocio  ciclo")
break;
case 14:
console.log("reconocio  RETURN")
break;
case 15:
console.log("reconocio  LLAMADA")
break;
case 16:
console.log("reconocio sentencia SWITCH")
break;
case 17:
console.log("reconocio sentencia BREAK")
break;
case 18:
console.log("reconocio sentencia CONTINUE")
break;
case 19:
console.log("reconocio sentencia AUMENTO")
break;
case 20:
console.log("reconocio sentencia INSTANCIA")
break;
case 21:
 console.log("Error sintactico en la linea"+(yylineno+1)); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{1:[3]},{2:$V0,5:[1,40],6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),{19:[1,42]},o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{19:[1,43]},{19:[1,44],60:$Vi},{19:[1,46]},{18:61,19:$Vj,23:50,26:$Vk,27:47,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,19:$Vj,23:50,26:$Vk,27:72,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{51:$Vz,60:[1,73]},o([51,60],$VA,{47:75,53:77,26:[1,76],69:$VB,70:$VC}),{26:[1,80]},{26:[1,81]},{26:[1,82]},{29:[1,83]},{26:[1,84]},{26:[1,85]},{19:[1,86]},{19:[1,87]},{35:$VD,59:88},o($VE,[2,62]),o($VE,[2,63]),o($VE,[2,64]),o($VE,[2,65]),o($VE,[2,66]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,15]),o($Vh,[2,19]),o($Vh,[2,20]),{18:61,19:$Vj,23:50,26:$Vk,27:90,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($Vh,[2,21]),{19:[1,91]},o([19,28,38],[2,73],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:99,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VL,[2,89]),o($VM,[2,90],{79:$VN,81:$VO,82:$VP,83:$VQ}),o([19,28,35,38,51,60,63,64,65,66,67,72,73,75,76,77,79,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97],[2,113],{53:77,26:$VR,69:$VB,70:$VC}),o($VL,[2,95]),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:106,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VL,[2,97]),o($VL,[2,98]),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,101]),o($VL,$VS),o($VL,[2,103]),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:107,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:108,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:109,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:110,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:111,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:112,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:113,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o([19,26,28,35,38,51,60,63,64,65,66,67,69,70,72,76,77,79,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97],$VT,{73:$VU,75:$VV}),{26:$VW},o($VL,[2,79]),{19:[1,117]},{18:61,19:$Vj,23:50,26:$Vk,27:118,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{35:[1,119]},{29:[1,121],38:[1,120]},{18:61,23:50,26:$Vk,28:[1,122],35:$Vl,48:127,50:123,52:125,54:124,55:126,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VL,[2,56]),{69:[1,128]},{70:[1,129]},{18:61,23:50,26:$Vk,27:130,28:$Vj,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{7:131,10:132,24:133,35:$VD,48:34,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:61,23:50,26:$Vk,27:134,28:$Vj,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$V0,4:135,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:61,23:50,26:$Vk,27:136,28:[1,137],35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{35:[1,138]},o($Vh,[2,33]),o($Vh,[2,34]),o([19,60],[2,68],{51:$Vz}),o($VX,$VA),{19:[1,139]},o($Vh,[2,58]),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:140,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:141,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VY,[2,104],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:142,60:[1,143],63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:145,60:[1,144],63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{26:$VW,60:[1,146]},{60:[1,147]},o($VM,[2,88],{79:$VN,81:$VO,82:$VP,83:$VQ}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:94,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,71:69,72:$VI,74:71,76:$VJ,77:$VK,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:148,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:149,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:150,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{84:[1,151]},{18:61,23:50,26:$Vk,28:[1,152],35:$Vl,48:60,54:124,55:126,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,28:[1,153],35:$Vl,48:60,55:94,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,71:69,72:$VI,74:71,76:$VJ,77:$VK,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VY,[2,105],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,106],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,107],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,108],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,109],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,110],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,111],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:154,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:155,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:156,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($Vh,[2,59]),{19:[1,157]},o($VX,[2,74]),{48:159,49:[1,158],63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:160,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:$VZ,29:[1,162],38:[1,161]},{28:[1,163],51:[1,164]},{28:[1,165],51:[1,166]},o($V_,[2,46]),o($V_,[2,50],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o([26,28,51,60,63,64,65,66,67,69,70,72,76,77,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97],$VS,{35:$V$}),o($VL,[2,70]),o($VL,[2,71]),{28:[1,168]},{18:61,19:$Vj,23:50,26:$Vk,27:169,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,19:$Vj,23:50,26:$Vk,27:170,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{60:$Vi},{28:[1,171]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,172],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{28:[1,173]},{19:[1,174]},{28:[1,175]},o([2,5,19,25,26,30,31,32,34,35,41,42,43,56,57,58,63,64,65,66,67,70,72,87,88,89,90,91,92,93,94,95,96,97],[2,67]),o($VM,[2,86],{79:$VN,81:$VO,82:$VP,83:$VQ}),o($VM,[2,87],{79:$VN,81:$VO,82:$VP,83:$VQ}),o($VY,[2,80],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:176,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:177,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VY,[2,83],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:178,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,35:$Vl,48:60,55:179,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VL,[2,91]),o($VL,[2,92]),o($VL,[2,93]),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:180,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VL,$VZ),o($VL,[2,96]),o($VL,[2,77]),o($VL,[2,78]),o([26,35,60,63,64,65,66,67,69,70,72,76,77,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97],$VT,{28:[1,181],73:$VU,75:$VV}),o([2,5,19,25,26,28,30,31,32,34,35,41,42,43,56,57,58,63,64,65,66,67,70,72,87,88,89,90,91,92,93,94,95,96,97],[2,60]),{29:[1,182]},{29:[1,183]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,184],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{48:186,49:[1,185],63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o([29,38],[2,44]),{48:189,52:188,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VL,[2,48]),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:190,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($V_,[2,47]),{29:[1,191]},{19:[1,192]},{19:[1,193]},{29:[1,194]},{31:[1,195],33:[1,196]},{19:[1,197]},o($Vh,[2,55]),{29:[1,198]},o($VY,[2,82],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,81],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,84],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($VY,[2,85],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{18:61,23:50,26:$Vk,35:$Vl,48:60,55:94,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,71:69,72:$VI,74:71,76:$VJ,77:$VK,78:51,80:53,85:[1,199],86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($VL,[2,76]),{2:$V0,4:200,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:201,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,43]),{29:[1,202]},{29:[1,203]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,204],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($V_,[2,45]),{35:$V$},o($V_,[2,49],{23:50,78:51,80:53,86:55,48:60,18:61,71:69,74:71,55:94,26:$Vk,35:$Vl,60:$VF,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$VG,70:$VH,72:$VI,76:$VJ,77:$VK,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),{2:$V0,4:205,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{10:207,18:61,23:50,26:$Vk,27:206,28:$Vj,35:$V01,48:60,55:48,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{10:210,18:61,23:50,26:$Vk,27:209,28:$Vj,35:$V01,48:60,55:48,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$V0,4:211,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{26:[1,212]},{26:[1,213]},o($Vh,[2,54]),{36:214,39:215,40:$V11},o($VL,[2,94]),{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,217],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,218],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:219,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:220,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,53]),{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,221],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{28:[1,222]},{28:[1,223]},o([28,35,51,60,63,64,65,66,67,72,76,77,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97],$VA,{53:77,26:$VR,69:$VB,70:$VC}),{28:[1,224]},{28:[1,225]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,226],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:61,23:50,26:$Vk,27:227,28:$Vj,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{18:61,23:50,26:$Vk,27:228,28:$Vj,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{37:[1,229],39:230,40:$V11},o($V21,[2,31]),{18:61,23:50,26:$Vk,27:231,35:$Vl,38:$Vj,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},o($Vh,[2,42]),o($Vh,[2,41]),{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,232],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,233],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,35],{44:234,45:[1,235],46:[1,236]}),{29:[1,237]},{29:[1,238]},{29:[1,239]},{29:[1,240]},o($Vh,[2,26]),{28:[1,241]},{28:[1,242]},{38:[1,243]},o($V21,[2,30]),{38:[1,244]},o($Vh,[2,52]),o($Vh,[2,51]),o($Vh,[2,36],{45:[1,245],46:[1,246]}),{26:[1,247]},{29:[1,248]},{2:$V0,4:249,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:250,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:251,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:252,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:[1,253]},{19:[1,254]},{29:[1,255]},{29:[1,256]},{26:[1,257]},{29:[1,258]},{18:61,23:50,26:$Vk,27:259,28:$Vj,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$V0,4:260,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,261],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,262],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,263],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,264],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,27]),o($Vh,[2,28]),{2:$V0,4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,4:266,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:61,23:50,26:$Vk,27:267,28:$Vj,35:$Vl,48:60,55:48,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,70:$Vm,71:69,72:$Vn,74:71,78:51,80:53,86:55,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{2:$V0,4:268,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{28:[1,269]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,270],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,22]),o($Vh,[2,24]),o($Vh,[2,23]),o($Vh,[2,25]),{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,271],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,272],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{28:[1,273]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,274],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{29:[1,275]},o($V31,[2,40]),{30:[1,276]},o($V21,[2,32]),{29:[1,277]},o($V31,[2,38]),{2:$V0,4:278,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vh,[2,29]),{2:$V0,4:279,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,280],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:$V1,30:[1,281],31:$V2,32:$V3,34:$V4,35:$V5,41:$V6,42:$V7,43:$V8,48:34,56:$V9,57:$Va,58:$Vb,59:24,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($V31,[2,39]),o($V31,[2,37])],
defaultActions: {40:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    //const {Declaracion} = require('./instrucciones/declaracion.js');
    //const {Asignacion} = require('./instrucciones/asignar.js');
    //const {Literal} = require('./expresiones/literal.js')
    //const {Type} = require('./symbols/type.js');
    //const {Arithmetic} = require('./expresiones/aritmeticas.js');
    //const {Acceso} = require('./expresiones/Acceso.js');
    //const {AritmeticOption} = require('./expresiones/aritmeticOption.js');
    //const {Bloque} = require('./instrucciones/Env')
    //const {Imprimir} = require('./instrucciones/imprimir')
   //const {Sentencia_if} = require('./instrucciones/condicionIf')
    //const {metodo} = require('./instrucciones/metodo')
    //const {llamada} = require('./instrucciones/llamada')
    //const { RelacionalOption } = require("./expresiones/relacionalOptions.js");
    //const { Relacional } = require("./expresiones/relacional.js");
    var array_erroresLexicos;
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 87
break;
case 4:return 89
break;
case 5:return 88
break;
case 6:return 90
break;
case 7:return 'pr_var'
break;
case 8:return 'pr_let'
break;
case 9:return 62
break;
case 10:return 63
break;
case 11:return 66
break;
case 12:return 67
break;
case 13:return 65
break;
case 14:return 64
break;
case 15:return 57
break;
case 16:return 58
break;
case 17:return 56
break;
case 18:return 31
break;
case 19:return 34
break;
case 20:return 25
break;
case 21:return 32
break;
case 22:return 43
break;
case 23:return 46
break;
case 24:return 45
break;
case 25:return 41
break;
case 26:return 49
break;
case 27:return 'pr_call'
break;
case 28:return 95
break;
case 29:return 40
break;
case 30:return 37
break;
case 31:return 33
break;
case 32:return 42
break;
case 33:return 91
break;
case 34:return 92
break;
case 35:return 93
break;
case 36:return 94
break;
case 37:return 96
break;
case 38:return 97
break;
case 39:return 19 
break;
case 40:return 60
break;
case 41:return 38 
break;
case 42:return 69 
break;
case 43:return 70 
break;
case 44:return 79 
break;
case 45:return 81 
break;
case 46:return 51
break;
case 47:return 29 
break;
case 48:return 30 
break;
case 49:return 28 
break;
case 50:return 26 
break;
case 51:return 76
break;
case 52:return 77
break;
case 53:return 75
break;
case 54:return 73
break;
case 55:return 83
break;
case 56:return 72
break;
case 57:return 82
break;
case 58:return 84
break;
case 59:return 85
break;
case 60:return 35;
break;
case 61:return 5
break;
case 62: 
        console.log("error lexico :"+yy_.yytext)
        //push para array errores
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+\.?[0-9]*))/i,/^(?:("[^\"]*"))/i,/^(?:(true|false\b))/i,/^(?:('[^']*'))/i,/^(?:var\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:break\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:typeof\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:;)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\))/i,/^(?:\()/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = prueba;
exports.Parser = prueba.Parser;
exports.parse = function () { return prueba.parse.apply(prueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}