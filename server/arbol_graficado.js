/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var arbol_graficado = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,31],$V2=[1,32],$V3=[1,33],$V4=[1,35],$V5=[1,29],$V6=[1,36],$V7=[1,37],$V8=[1,30],$V9=[1,34],$Va=[1,38],$Vb=[1,26],$Vc=[1,27],$Vd=[1,40],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[2,5,29,34,35,36,38,39,45,46,47,60,64,68,69,76,77,78,79,80],$Vj=[1,50],$Vk=[2,89],$Vl=[1,59],$Vm=[1,57],$Vn=[1,54],$Vo=[1,76],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,80],$VC=[55,71],$VD=[2,92],$VE=[1,81],$VF=[1,86],$VG=[1,87],$VH=[1,100],$VI=[19,30,32,33,34,39,42,55,71,72,73,76,77,78,79,80,83,84,86,87,89,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$VJ=[1,109],$VK=[1,103],$VL=[1,104],$VM=[1,108],$VN=[1,106],$VO=[1,107],$VP=[19,30,32,34,39,42,55,71,73,76,77,78,79,80,83,84,86,87,89,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$VQ=[19,30,32,34,39,42,55,71,73,76,77,78,79,80,83,84,86,87,89,90,91,99,100,101,102,103,104,105,106,107,108,109,110],$VR=[1,112],$VS=[1,113],$VT=[1,114],$VU=[1,115],$VV=[1,117],$VW=[2,120],$VX=[2,132],$VY=[1,126],$VZ=[1,127],$V_=[1,128],$V$=[19,55,71],$V01=[19,32,34,42,55,73,87,89,93,95,96,97],$V11=[2,63],$V21=[1,187],$V31=[32,55],$V41=[32,34,55],$V51=[1,188],$V61=[2,5,19,29,30,32,34,35,36,38,39,45,46,47,60,64,68,69,76,77,78,79,80,84,86,99,100,101,102,103,104,105,106,107,108,109,110],$V71=[1,208],$V81=[2,122],$V91=[1,244],$Va1=[1,252],$Vb1=[1,255],$Vc1=[41,44],$Vd1=[1,281],$Ve1=[2,123],$Vf1=[30,32,39,76,77,78,79,80,83,84,86,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$Vg1=[34,55],$Vh1=[2,5,29,34,35,36,38,39,45,46,47,49,50,60,64,68,69,76,77,78,79,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"IMPRIMIR":8,"IMPRIMIRLN":9,"ASIGNACION":10,"METODO":11,"FUNCION":12,"METODOsp":13,"FUNCIONsp":14,"CONDICIONIF":15,"CICLO":16,"RETURN":17,"CALL":18,";":19,"SWITCH":20,"BREAK":21,"CONTINUE":22,"PUSH":23,"POP":24,"RUN":25,"AUMENTO":26,"INSTANCIA":27,"DECLARACION_VECTORES":28,"pr_for":29,"(":30,"ETS":31,")":32,"{":33,"}":34,"pr_while":35,"pr_do":36,"pr_until":37,"pr_switch":38,"id":39,"OPCIONES":40,"pr_default":41,":":42,"OPCION":43,"pr_case":44,"pr_break":45,"pr_continue":46,"pr_if":47,"IFANIDADOS":48,"pr_elif":49,"pr_else":50,"PARAMETROS":51,"TIPODATO_DECLARACION":52,"pr_void":53,"PARS":54,",":55,"PAR":56,"PARAMETROSLL":57,"PARSLL":58,"E":59,"pr_return":60,".":61,"pr_pop":62,"pr_push":63,"pr_run":64,"LISTADEPARSLL":65,"PARALISTA":66,"LISTADELISTAS":67,"pr_print":68,"pr_println":69,"IDS":70,"=":71,"[":72,"]":73,"TIPO_DECLARACION_CONST":74,"pr_const":75,"pr_numero":76,"pr_bool":77,"pr_string":78,"pr_double":79,"pr_char":80,"pr_new":81,"DECLARACION_INTERNA":82,"+":83,"-":84,"COMPARACIONES":85,"!":86,"&&":87,"COMP":88,"||":89,"<":90,">":91,"Term":92,"*":93,"Factor":94,"/":95,"%":96,"^":97,"F":98,"expreR_numero":99,"true":100,"false":101,"expreR_cadena":102,"expreR_cadenita":103,"pr_TL":104,"pr_TU":105,"pr_round":106,"pr_len":107,"pr_typeof":108,"pr_TS":109,"pr_TCA":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:";",29:"pr_for",30:"(",32:")",33:"{",34:"}",35:"pr_while",36:"pr_do",37:"pr_until",38:"pr_switch",39:"id",41:"pr_default",42:":",44:"pr_case",45:"pr_break",46:"pr_continue",47:"pr_if",49:"pr_elif",50:"pr_else",53:"pr_void",55:",",60:"pr_return",61:".",62:"pr_pop",63:"pr_push",64:"pr_run",68:"pr_print",69:"pr_println",71:"=",72:"[",73:"]",75:"pr_const",76:"pr_numero",77:"pr_bool",78:"pr_string",79:"pr_double",80:"pr_char",81:"pr_new",83:"+",84:"-",86:"!",87:"&&",89:"||",90:"<",91:">",93:"*",95:"/",96:"%",97:"^",99:"expreR_numero",100:"true",101:"false",102:"expreR_cadena",103:"expreR_cadenita",104:"pr_TL",105:"pr_TU",106:"pr_round",107:"pr_len",108:"pr_typeof",109:"pr_TS",110:"pr_TCA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[16,10],[16,10],[16,10],[16,10],[16,7],[16,9],[16,9],[20,12],[40,2],[40,1],[43,6],[21,2],[22,2],[15,7],[15,8],[48,8],[48,5],[48,7],[48,4],[12,7],[11,7],[11,5],[51,3],[54,3],[54,1],[56,2],[57,3],[58,3],[58,1],[14,8],[13,8],[13,6],[17,5],[17,4],[24,6],[23,5],[18,2],[18,3],[25,3],[65,3],[65,1],[66,3],[67,3],[8,3],[9,3],[10,4],[10,7],[10,10],[74,1],[52,1],[52,1],[52,1],[52,1],[52,1],[7,4],[28,11],[28,16],[28,7],[28,9],[27,2],[82,4],[26,3],[26,3],[31,0],[31,1],[70,3],[70,1],[85,4],[85,3],[85,3],[85,1],[88,3],[88,4],[88,4],[88,3],[88,4],[88,4],[59,3],[59,3],[59,2],[59,1],[59,1],[92,3],[92,3],[92,3],[92,5],[92,1],[94,3],[94,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,4],[98,7],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,1],[98,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 p = new listaenlazada(); 
                                p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                p.agrega(new nodo($$[$0-1])); 
                                p.ver(p,"");
                                var sale = p.g(); 
                                return sale;
                                
break;
case 2:
 p = $$[$0-1]; 
                                                p.agrega(new nodo("BLOQUE_INSTRUCCION")); 
                                                p.agrega(new nodo($$[$0])); 
                                                this.$ = p;
break;
case 3:
 p = new listaenlazada(); 
                                                p.agrega(new nodo("BLOQUE_INSTRUCCION")); 
                                                p.agrega(new nodo($$[$0]));
                                                this.$ = p; 
break;
case 4:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_DECLARACION")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 5:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_PRINT")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 6:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_PRINTLN")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 7:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_ASIGNACION")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 8:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_METODO")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 9:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_FUNCION")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 10:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_METODOSP")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 11:
 p = new listaenlazada(); p.agrega(new nodo("FUNCIONSP")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 12:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_IF")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 13:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_CICLO")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 14:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_RETURN")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 15:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_LLAMADA")); p.agrega(new nodo($$[$0-1]));this.$ = p;
break;
case 16:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_SWITCH")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 17:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_BREAK")); this.$ = p;
break;
case 18:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_CONTINUE")); this.$ = p;
break;
case 19:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_PUSH")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 20:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_POP")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 21:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_RUN")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 22:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_AUMENTO")); p.agrega(new nodo($$[$0-1]));this.$ = p;
break;
case 23:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_INSTANCIA")); p.agrega(new nodo($$[$0-1]));this.$ = p;
break;
case 24:
 p = new listaenlazada(); p.agrega(new nodo("INSTRUCCION_DECLARACIONVECTORES")); p.agrega(new nodo($$[$0]));this.$ = p;
break;
case 25:
 console.log("Error sintactico en la linea"+(yylineno+1)); 
break;
case 26:
 p = new listaenlazada(); 
                                                                                    p.agrega(new nodo("FOR"));
                                                                                    p.agrega(new nodo("DECLARACION"));
                                                                                    p.agrega(new nodo($$[$0-7]));
                                                                                    p.agrega(new nodo("ETS"));
                                                                                     p.agrega(new nodo($$[$0-6]));
                                                                                    p.agrega(new nodo("ETS"));
                                                                                    p.agrega(new nodo($$[$0-4]));
                                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                                    p.agrega(new nodo($$[$0-1]));
                                                                                    this.$=p;
break;
case 27:
 p = new listaenlazada(); 
                                                                                    p.agrega(new nodo("FOR"));
                                                                                    p.agrega(new nodo("ASIGNACION"));
                                                                                    p.agrega(new nodo($$[$0-7]));
                                                                                    p.agrega(new nodo("ETS"));
                                                                                     p.agrega(new nodo($$[$0-6]));
                                                                                    p.agrega(new nodo("ETS"));
                                                                                    p.agrega(new nodo($$[$0-4]));
                                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                                    p.agrega(new nodo($$[$0-1]));
                                                                                    this.$=p;
break;
case 28:
 p = new listaenlazada(); 
                                                                                    p.agrega(new nodo("FOR"));
                                                                                    p.agrega(new nodo("DECLARACION"));
                                                                                    p.agrega(new nodo($$[$0-7]));
                                                                                    p.agrega(new nodo("ETS"));
                                                                                     p.agrega(new nodo($$[$0-6]));
                                                                                    p.agrega(new nodo("ASIGNACION"));
                                                                                    p.agrega(new nodo($$[$0-4]));
                                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                                    p.agrega(new nodo($$[$0-1]));
                                                                                    this.$=p;
break;
case 29:
 p = new listaenlazada(); 
                                                                                    p.agrega(new nodo("FOR"));
                                                                                    p.agrega(new nodo("ASIGNACION"));
                                                                                    p.agrega(new nodo($$[$0-7]));
                                                                                    p.agrega(new nodo("ETS"));
                                                                                     p.agrega(new nodo($$[$0-6]));
                                                                                    p.agrega(new nodo("ASIGNACION"));
                                                                                    p.agrega(new nodo($$[$0-4]));
                                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                                    p.agrega(new nodo($$[$0-1]));
                                                                                    this.$=p;
break;
case 30:
 p = new listaenlazada(); 
                                                        p.agrega(new nodo("WHILE"));
                                                        p.agrega(new nodo("ABRE_PARENTESIS"));
                                                        p.agrega(new nodo("ETS"));
                                                        p.agrega(new nodo($$[$0-4]));
                                                        p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                        p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                        p.agrega(new nodo($$[$0-1]));
                                                        this.$=p;
break;
case 31:
 p = new listaenlazada(); 
                                                                    p.agrega(new nodo("DO"));
                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                    p.agrega(new nodo($$[$0-6]));
                                                                    p.agrega(new nodo("WHILE"));
                                                                    p.agrega(new nodo("ABRE_PARENTESIS"));
                                                                    p.agrega(new nodo("ETS"));
                                                                    p.agrega(new nodo($$[$0-2]));
                                                                    p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                                    p.agrega(new nodo("PUNTO_Y_COMA"));
                                                                    this.$=p;
break;
case 32:
 p = new listaenlazada(); 
                                                                    p.agrega(new nodo("DO"));
                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                    p.agrega(new nodo($$[$0-6]));
                                                                    p.agrega(new nodo("UNTIL"));
                                                                    p.agrega(new nodo("ABRE_PARENTESIS"));
                                                                    p.agrega(new nodo("ETS"));
                                                                    p.agrega(new nodo($$[$0-2]));
                                                                    p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                                    p.agrega(new nodo("PUNTO_Y_COMA"));
                                                                    this.$=p;
break;
case 33:
 p = new listaenlazada();
                                                                                            p.agrega(new nodo("SWITCH"));
                                                                                            p.agrega(new nodo("VARIABLE"));
                                                                                            p.agrega(new nodo("OPCIONES"));
                                                                                            p.agrega(new nodo($$[$0-6]));
                                                                                            p.agrega(new nodo("DEFAULT"));
                                                                                            p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                                            p.agrega(new nodo($$[$0-2]));
                                                                                            this.$=p;
break;
case 34:
 p = $$[$0-1];
                                p.agrega(new nodo("OPCION"));
                                p.agrega(new nodo($$[$0]));
                                this.$ = p;
                                
break;
case 35:
 p = new listaenlazada();
                        p.agrega(new nodo("OPCION"));
                        p.agrega(new nodo($$[$0]));
                        this.$ = p;
break;
case 36:
 p = new listaenlazada(); 
                                                        p.agrega(new nodo("CASE"));
                                                        p.agrega(new nodo("ETS"));
                                                        p.agrega(new nodo($$[$0-4]));
                                                        p.agrega(new nodo("DOS_PUNTOS"));
                                                        p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                        p.agrega(new nodo($$[$0-1]));
                                                        this.$ = p;
break;
case 39:
 p = new listaenlazada(); 
                                                            p.agrega(new nodo("IF"));
                                                            p.agrega(new nodo("ABRE_PARENTESIS"));
                                                            p.agrega(new nodo("ETS")); 
                                                            p.agrega(new nodo($$[$0-4])); 
                                                            p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                            p.agrega(new nodo("ENTONCES"));
                                                            p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                            p.agrega(new nodo($$[$0-1]));
                                                            this.$ = p;
break;
case 40:
 p = new listaenlazada(); 
                                                                            p.agrega(new nodo("IF"));
                                                                            p.agrega(new nodo("ABRE_PARENTESIS"));
                                                                            p.agrega(new nodo("ETS")); 
                                                                            p.agrega(new nodo($$[$0-5])); 
                                                                            p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                                            p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                                            p.agrega(new nodo($$[$0-2]));
                                                                            p.concatena($$[$0]);
                                                                            this.$ = p;
break;
case 41:
 p =$$[$0-7];
                                                                        p.agrega(new nodo("ELSE_IF"));
                                                                        p.agrega(new nodo("ABRE_PARENTESIS"));
                                                                        p.agrega(new nodo("ETS")); 
                                                                        p.agrega(new nodo($$[$0-4])); 
                                                                        p.agrega(new nodo("CIERRA_PARENTESIS_PARENTESIS"));
                                                                        p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                        p.agrega(new nodo($$[$0-1]));
                                                                        this.$=p;
break;
case 42:
 p = $$[$0-4];
                                                                p.agrega(new nodo("ELSE"));
                                                                p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                p.agrega(new nodo($$[$0-1]));
                                                                this.$=p;
break;
case 43:
 p = new listaenlazada();
                                                                    p.agrega(new nodo("ELSE_IF"));
                                                                    p.agrega(new nodo("ABRE_PARENTESIS"));
                                                                    p.agrega(new nodo("ETS")); 
                                                                    p.agrega(new nodo($$[$0-4])); 
                                                                    p.agrega(new nodo("CIERRA_PARENTESIS_PARENTESIS"));
                                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                                    p.agrega(new nodo($$[$0-1]));
                                                                    this.$=p;
break;
case 44:
p = new listaenlazada();
                                                    p.agrega(new nodo("ELSE"));
                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES"));
                                                    p.agrega(new nodo($$[$0-1]));
                                                    this.$=p;
break;
case 45:
 p = new listaenlazada(); 
                                                    p.agrega(new nodo("VARIABLE")); 
                                                    p.concatena($$[$0-5]);
                                                    p.agrega(new nodo("DOS_PUNTOS")); 
                                                    p.agrega(new nodo("TIPO_DATO")); 
                                                    p.agrega(new nodo($$[$0-3]));
                                                    p.agrega(new nodo("ABRE_LLAVE")); 
                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                    p.agrega(new nodo($$[$0-1]));
                                                    p.agrega(new nodo("CIERRA_LLAVE"));
                                                    this.$ = p;
break;
case 46:
 p = new listaenlazada(); 
                                                    p.agrega(new nodo("VARIABLE")); 
                                                    p.concatena($$[$0-5]);
                                                    p.agrega(new nodo("DOS_PUNTOS")); 
                                                    p.agrega(new nodo("VOID")); 
                                                    p.agrega(new nodo("ABRE_LLAVE")); 
                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                    p.agrega(new nodo($$[$0-1]));
                                                    p.agrega(new nodo("CIERRA_LLAVE"));
                                                    this.$ = p;
break;
case 47:
 p = new listaenlazada(); 
                                                    p.agrega(new nodo("VARIABLE")); 
                                                    p.concatena($$[$0-3]);
                                                    p.agrega(new nodo("ABRE_LLAVE")); 
                                                    p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                    p.agrega(new nodo($$[$0-1]));
                                                    p.agrega(new nodo("CIERRA_LLAVE"));
                                                    this.$ = p;
break;
case 48:
 p = new listaenlazada();
                            p.agrega(new nodo("ABRE_PARENTESIS"));
                            p.agrega(new nodo("PARAMETROS")); 
                            p.agrega(new nodo($$[$0-1])); 
                            p.agrega(new nodo("CIERRA_PARENTESIS"));
                            this.$ = p;
                            
break;
case 49:
 p = $$[$0-2]; 
                        p.agrega(new nodo("COMA"));
                        p.agrega(new nodo("PAR")); 
                        p.agrega(new nodo($$[$0]));  
                        this.$ = p;
                        
break;
case 50:
 p =new listaenlazada();
                p.agrega(new nodo("PAR")); 
                p.agrega(new nodo($$[$0])); 
                this.$ = p;
                
break;
case 51:
 p =new listaenlazada();
                                    p.agrega(new nodo("TIPO_DATO")); 
                                    p.agrega(new nodo($$[$0-1]));
                                    p.agrega(new nodo("VARIABLE")); 
                                    this.$ = p;
                                    
break;
case 52:
 p = new listaenlazada();
                            p.agrega(new nodo("ABRE_PARENTESIS"));
                            p.agrega(new nodo("PARAMETROS")); 
                            p.agrega(new nodo($$[$0-1])); 
                            p.agrega(new nodo("CIERRA_PARENTESIS"));
                            this.$ = p;
break;
case 53:
                   p = $$[$0-2]; 
                                            p.agrega(new nodo("COMA"));
                                            p.agrega(new nodo("E")); 
                                            p.agrega(new nodo($$[$0]));  
                                            this.$ = p;
                                            
break;
case 54:
              p =new listaenlazada();
                        p.agrega(new nodo("E")); 
                        p.agrega(new nodo($$[$0])); 
                        this.$ = p;
break;
case 55:
 p = new listaenlazada(); 
                                                p.agrega(new nodo("VARIABLE"));
                                                p.agrega(new nodo("ABRE_PARENTESIS")); 
                                                p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                p.agrega(new nodo("DOS_PUNTOS"));
                                                p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                p.agrega(new nodo($$[$0-3]));
                                                p.agrega(new nodo("ABRE_CORCHETE"));
                                                p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                p.agrega(new nodo($$[$0-1]));
                                                p.agrega(new nodo("CIERRA_CORCHETE"));
                                                this.$ = p;
break;
case 56:
 p = new listaenlazada(); 
                                                p.agrega(new nodo("VARIABLE"));
                                                p.agrega(new nodo("ABRE_PARENTESIS")); 
                                                p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                p.agrega(new nodo("DOS_PUNTOS"));
                                                p.agrega(new nodo("VOID"));
                                                p.agrega(new nodo("ABRE_CORCHETE"));
                                                p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                p.agrega(new nodo($$[$0-1]));
                                                p.agrega(new nodo("CIERRA_CORCHETE"));
                                                this.$ = p;
break;
case 57:
 p = new listaenlazada(); 
                                                p.agrega(new nodo("VARIABLE"));
                                                p.agrega(new nodo("ABRE_PARENTESIS")); 
                                                p.agrega(new nodo("CIERRA_PARENTESIS"));
                                                p.agrega(new nodo("ABRE_CORCHETE"));
                                                p.agrega(new nodo("BLOQUE_INSTRUCCIONES")); 
                                                p.agrega(new nodo($$[$0-1]));
                                                p.agrega(new nodo("CIERRA_CORCHETE"));
                                                this.$ = p;
break;
case 58:
 p = new listaenlazada(); 
                                p.agrega(new nodo("RETURN"));
                                p.agrega(new nodo("ETS")); 
                                p.agrega(new nodo($$[$0-2])); 
                                p.agrega(new nodo("PUNTO_Y_COMA"));
                                this.$ = p;
break;
case 59:
 p = new listaenlazada(); 
                                p.agrega(new nodo("RETURN"));
                                p.agrega(new nodo("ABRE PARENTESIS")); 
                                p.agrega(new nodo("CIERRA PARENTESIS"));
                                p.agrega(new nodo("PUNTO_Y_COMA"));
                                this.$ = p;
break;
case 60:
 p = new listaenlazada(); 
                                p.agrega(new nodo("VARIABLE"));
                                p.agrega(new nodo("POP")); 
                                p.agrega(new nodo("ABRE_PARENTESIS")); 
                                p.agrega(new nodo("CIERRA_PARENTESIS")); 
                                this.$ = p;
break;
case 61:
 p = new listaenlazada(); 
                                p.agrega(new nodo("VARIABLE"));
                                p.agrega(new nodo("PUSH")); 
                                p.agrega(new nodo("ETS")); 
                                p.agrega(new nodo($$[$0-1])); 
                                this.$ = p;
break;
case 62:
 p = new listaenlazada(); 
                                p.agrega(new nodo("VARIABLE"));
                                p.agrega(new nodo("PARAMETROSLL")); 
                                p.agrega(new nodo($$[$0])); 
                                this.$ = p;
break;
case 63:
 p = new listaenlazada(); 
                                p.agrega(new nodo("VARIABLE"));
                                p.agrega(new nodo("ABRE PARENTESIS")); 
                                p.agrega(new nodo("CIERRA PARENTESIS"));
                                this.$ = p;
break;
case 64:
 p = new listaenlazada(); 
                                p.agrega(new nodo("RUN"));
                                p.agrega(new nodo("CALL")); 
                                p.agrega(new nodo($$[$0-1]));
                                this.$ = p;
break;
case 65:
 p = $$[$0-2]; 
                                            p.agrega(new nodo("COMA"));
                                            p.agrega(new nodo("PARALISTA")); 
                                            p.agrega(new nodo($$[$0]));  
                                            this.$ = p;
                                            
break;
case 66:
 p =new listaenlazada();
                        p.agrega(new nodo("PARALISTA")); 
                        p.agrega(new nodo($$[$0])); 
                        this.$ = p;
break;
case 67:
 p = new listaenlazada();
                            p.agrega(new nodo("ABRE_LLAVE"));
                            p.agrega(new nodo("PARAMETROS")); 
                            p.agrega(new nodo($$[$0-1])); 
                            p.agrega(new nodo("CIERRA_LLAVE"));
                            this.$ = p;
break;
case 68:
 p = new listaenlazada();
                            p.agrega(new nodo("ABRE_LLAVE"));
                            p.agrega(new nodo("LISTADEPARSLL")); 
                            p.agrega(new nodo($$[$0-1])); 
                            p.agrega(new nodo("CIERRA_LLAVE"));
                            this.$ = p;
break;
case 69:
 p = new listaenlazada(); 
                                p.agrega(new nodo("IMPRIMIR"));
                                p.agrega(new nodo("ETS")); 
                                p.agrega(new nodo($$[$0-1])); 
                                p.agrega(new nodo("PUNTO_Y_COMA"));
                                this.$ = p;
break;
case 70:
 p = new listaenlazada(); 
                                p.agrega(new nodo("IMPRIMIRLN"));
                                p.agrega(new nodo("ETS")); 
                                p.agrega(new nodo($$[$0-1])); 
                                p.agrega(new nodo("PUNTO_Y_COMA"));
                                this.$ = p;
break;
case 71:
 p = new listaenlazada();
                                        p.agrega(new nodo("IDS"));
                                        p.agrega(new nodo($$[$0-3]));
                                        p.agrega(new nodo("IGUAL"));
                                        p.agrega(new nodo("ETS"));
                                        p.agrega(new nodo($$[$0-1]));
                                        p.agrega(new nodo("PUNTO Y COMA"));
                                        this.$ = p;
break;
case 72:
 p = new listaenlazada();
                                        p.agrega(new nodo("VARIABLE"));
                                        p.agrega(new nodo("ABRE CORCHETE"));
                                        p.agrega(new nodo("E"));
                                        p.agrega(new nodo($$[$0-4]));
                                        p.agrega(new nodo("CIERRA CORCHETE"));
                                        p.agrega(new nodo("IGUAL"));
                                        p.agrega(new nodo("ETS"));
                                        p.agrega(new nodo($$[$0-1]));
                                        p.agrega(new nodo("PUNTO Y COMA"));
                                        this.$ = p;
break;
case 73:
 p = new listaenlazada();
                                        p.agrega(new nodo("VARIABLE"));
                                        p.agrega(new nodo("ABRE CORCHETE"));
                                        p.agrega(new nodo("E"));
                                        p.agrega(new nodo($$[$0-7]));
                                        p.agrega(new nodo("CIERRA CORCHETE"));
                                        p.agrega(new nodo("ABRE CORCHETE"));
                                        p.agrega(new nodo("E"));
                                        p.agrega(new nodo($$[$0-4]));
                                        p.agrega(new nodo("CIERRA CORCHETE"));
                                        p.agrega(new nodo("IGUAL"));
                                        p.agrega(new nodo("ETS"));
                                        p.agrega(new nodo($$[$0-1]));
                                        p.agrega(new nodo("PUNTO Y COMA"));
                                        this.$ = p;
break;
case 75:
 p = new listaenlazada(); p.agrega( new nodo("TIPO_NUMERO")); this.$ = p;
break;
case 76:
 p = new listaenlazada(); p.agrega( new nodo("TIPO_BOOLEAN")); this.$ = p;
break;
case 77:
 p = new listaenlazada(); p.agrega( new nodo("TIPO_STRING")); this.$ = p;
break;
case 78:
 p = new listaenlazada(); p.agrega( new nodo("TIPO_DOUBLE")); this.$ = p;
break;
case 79:
 p = new listaenlazada(); p.agrega( new nodo("TIPO_CHAR")); this.$ = p;
break;
case 80:
 p = new listaenlazada();
                                        p.concatena($$[$0-3]);
                                        p.agrega(new nodo("IGUAL"));
                                        p.agrega(new nodo("ETS"));
                                        p.agrega(new nodo($$[$0-1]));
                                        p.agrega(new nodo("PUNTO Y COMA"));
                                        this.$ = p;
break;
case 81:
 p = new listaenlazada();
                                                                                                        p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                                                                        p.agrega(new nodo($$[$0-10]));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("VARIABLE"));
                                                                                                        p.agrega(new nodo("IGUAL"));
                                                                                                        p.agrega(new nodo("NEW"));
                                                                                                        p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                                                                        p.agrega(new nodo($$[$0-4]));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("ETS"));
                                                                                                        p.agrega(new nodo($$[$0-2]));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("PUNTO_Y_COMA"));
                                                                                                          this.$ = p;
break;
case 82:
 p = new listaenlazada();
                                                                                                        p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                                                                        p.agrega(new nodo($$[$0-15]));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("VARIABLE"));
                                                                                                        p.agrega(new nodo("IGUAL"));
                                                                                                        p.agrega(new nodo("NEW"));
                                                                                                        p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                                                                        p.agrega(new nodo($$[$0-7]));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("ETS"));
                                                                                                        p.agrega(new nodo($$[$0-5]));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                         p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("ETS"));
                                                                                                        p.agrega(new nodo($$[$0-2]));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("PUNTO_Y_COMA"));
                                                                                                          this.$ = p;
break;
case 83:
 p = new listaenlazada();
                                                                                                        p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                                                                        p.agrega(new nodo($$[$0-6]));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("VARIABLE"));
                                                                                                        p.agrega(new nodo("IGUAL"));
                                                                                                        p.agrega(new nodo("PARALISTA"));
                                                                                                        p.agrega(new nodo($$[$0-1]));
                                                                                                        p.agrega(new nodo("PUNTO_Y_COMA"));
                                                                                                          this.$ = p;
break;
case 84:
 p = new listaenlazada();
                                                                                                        p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                                                                                        p.agrega(new nodo($$[$0-8]));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("ABRE_CORCHETE"));
                                                                                                        p.agrega(new nodo("CIERRACORCHETE"));
                                                                                                        p.agrega(new nodo("VARIABLE"));
                                                                                                        p.agrega(new nodo("IGUAL"));
                                                                                                        p.agrega(new nodo("LISTADELISTAS"));
                                                                                                        p.agrega(new nodo($$[$0-1]));
                                                                                                        p.agrega(new nodo("PUNTO_Y_COMA"));
                                                                                                          this.$ = p;
break;
case 85:
 p = new listaenlazada();
                                    p.agrega(new nodo("TIPO_DATO_DECLARACION"));
                                    p.agrega(new nodo($$[$0-1])); 
                                    p.agrega(new nodo("IDS")); 
                                    p.agrega(new nodo($$[$0]));
                                     this.$ = p;
break;
case 87:
 p = new listaenlazada(); p.agrega(new nodo("VARIABLE")); p.agrega(new nodo("MAS_aumento")); p.agrega(new nodo("MAS_aumento"));  this.$ = p;
break;
case 88:
 p = new listaenlazada(); p.agrega(new nodo("VARIABLE")); p.agrega(new nodo("MENOS_aumento")); p.agrega(new nodo("MENOS_aumento"));  this.$ = p;
break;
case 90:
 p = new listaenlazada(); p.agrega(new nodo("E")); p.agrega(new nodo($$[$0])); this.$ = p;
break;
case 91:
 p = $$[$0-2]; p.agrega(new nodo("COMA"));p.agrega(new nodo("VARIABLE")); this.$ = p;
break;
case 92:
 p =new listaenlazada();p.agrega(new nodo("VARIABLE")); this.$ = p;
break;
case 93:
 p = new listaenlazada(); p.agrega(new nodo("NOT")); p.agrega(new nodo("ABRE_PARENTESIS"));  p.concatena($$[$0-1]); p.agrega(new nodo("CIERRA_PARENTESIS_PARENTESIS"));this.$ = p;
break;
case 94:
 p = $$[$0-2]; p.agrega(new nodo("AND")); p.concatena($$[$0]);  this.$ = p;
break;
case 95:
 p = $$[$0-2]; p.agrega(new nodo("OR")); p.concatena($$[$0]);  this.$ = p;
break;
case 96:
 p = $$[$0]; this.$ = p;
break;
case 97:
 p = $$[$0-2]; p.agrega(new nodo("ES_MENOR")); p.concatena($$[$0]);  this.$ = p;
break;
case 98:
 p = $$[$0-3]; p.agrega(new nodo("ES_MAYOR_IGUAL")); p.concatena($$[$0]);  this.$ = p;
break;
case 99:
 p = $$[$0-3]; p.agrega(new nodo("ES_MENOR_IGUAL")); p.concatena($$[$0]);  this.$ = p;
break;
case 100:
 p = $$[$0-2]; p.agrega(new nodo("ES_MAYOR")); p.concatena($$[$0]);  this.$ = p;
break;
case 101:
 p = $$[$0-3]; p.agrega(new nodo("ES_DIFERENTE")); p.concatena($$[$0]);  this.$ = p;
break;
case 102:
 p = $$[$0-3]; p.agrega(new nodo("ES_IGUAL")); p.concatena($$[$0]);  this.$ = p;
break;
case 103:
 p = $$[$0-2]; p.agrega(new nodo("MAS")); p.concatena($$[$0]);  this.$ = p;
break;
case 104:
 p = $$[$0-2]; p.agrega(new nodo("MENOS")); p.concatena($$[$0]);  this.$ = p;
break;
case 105:
p = new listaenlazada(); p.agrega(new nodo("MENOS"));  p.concatena($$[$0]); this.$ = p;
break;
case 106: case 107: case 112: case 120: case 121: case 132:
this.$=$$[$0]
break;
case 108:
 p = $$[$0-2]; p.agrega(new nodo("POR")); p.concatena($$[$0]);  this.$ = p;
break;
case 109:
 p = $$[$0-2]; p.agrega(new nodo("DIVIDIDO")); p.concatena($$[$0]);  this.$ = p;
break;
case 110:
 p = $$[$0-2]; p.agrega(new nodo("MOD")); p.concatena($$[$0]);  this.$ = p;
break;
case 111:
 p = $$[$0-4]; p.agrega(new nodo("POTENCIA")); p.agrega(new nodo("ABRE_CORCHETE"));p.concatena($$[$0-1]);p.agrega(new nodo("CIERRA_CORCHETE"));  this.$ = p;
break;
case 113:
 p = new listaenlazada();p.agrega(new nodo("ABRE_ARENTESIS"));p.concatena($$[$0-1]);p.agrega(new nodo("CIERRA_PARENTESIS"));this.$= p;
break;
case 114:
 FE = new listaenlazada();
    if($$[$0].constructor.name!="listaenlazada")
    {
     FE.agrega($$[$0]);
     }
     else
     {
        FE.concatena($$[$0]);
     }
     this.$= FE;
break;
case 115:
this.$= new nodo("INT");
break;
case 116:
this.$= new nodo("TRUE");
break;
case 117:
this.$= new nodo("FALSE");
break;
case 118:
this.$= new nodo("FRASE");
break;
case 119:
this.$ = new nodo("FRASECITA");
break;
case 122:
 p = new listaenlazada();p.agrega(new nodo("VARIABLE"));p.agrega(new nodo("ABRE_CORCHETE"));p.concatena($$[$0-1]);p.agrega(new nodo("CIERRA_CORCHETE"));this.$= p;
break;
case 123:
 p = new listaenlazada();p.agrega(new nodo("VARIABLE"));p.agrega(new nodo("ABRE_CORCHETE"));p.concatena($$[$0-4]);p.agrega(new nodo("CIERRA_CORCHETE"));p.agrega(new nodo("ABRE_CORCHETE"));p.concatena($$[$0-1]);p.agrega(new nodo("CIERRA_CORCHETE"));this.$= p;
break;
case 124:
 p = new listaenlazada();p.concatena($$[$0-1]);p.concatena($$[$0]);this.$= p;
break;
case 125:
 p = new listaenlazada();p.agrega(new nodo("TO_LOWER"));p.concatena($$[$0]);this.$= p;
break;
case 126:
 p = new listaenlazada();p.agrega(new nodo("TO_UPPER"));p.concatena($$[$0]);this.$= p;
break;
case 127:
 p = new listaenlazada();p.agrega(new nodo("ROUND"));p.concatena($$[$0]);this.$= p;
break;
case 128:
 p = new listaenlazada();p.agrega(new nodo("LENGTH"));p.concatena($$[$0]);this.$= p;
break;
case 129:
 p = new listaenlazada();p.agrega(new nodo("TYPE_OF"));p.concatena($$[$0]);this.$= p;
break;
case 130:
 p = new listaenlazada();p.agrega(new nodo("TO_STRING"));p.concatena($$[$0]);this.$= p;
break;
case 131:
 p = new listaenlazada();p.agrega(new nodo("TO_CHAR_ARRAY"));p.concatena($$[$0]);this.$= p;
break;
case 133:
this.$= new nodo("VARIABLE");
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{19:[1,47]},o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{19:[1,48]},{19:[1,49],71:$Vj},o($Vi,[2,24]),{19:[1,51]},{18:67,19:$Vk,26:55,30:$Vl,31:52,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,19:$Vk,26:55,30:$Vl,31:78,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{55:$VB,71:[1,79]},o($VC,$VD,{51:82,57:84,30:[1,83],61:[1,85],72:$VE,83:$VF,84:$VG}),{30:[1,88]},{30:[1,89]},{30:[1,90]},{33:[1,91]},{30:[1,92]},{30:[1,93]},{19:[1,94]},{19:[1,95]},{18:96,39:[1,97]},{39:$VH,70:98,72:[1,99]},o($VI,[2,75]),o($VI,[2,76]),o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,79]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,15]),o($Vi,[2,22]),o($Vi,[2,23]),{18:67,19:$Vk,26:55,30:$Vl,31:101,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($Vi,[2,25]),{19:[1,102]},o([19,32,42,73],[2,90],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:110,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($VP,[2,106]),o($VQ,[2,107],{93:$VR,95:$VS,96:$VT,97:$VU}),o([19,32,34,39,42,55,71,73,76,77,78,79,80,86,87,89,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],[2,133],{57:84,30:$VV,72:[1,116],83:$VF,84:$VG}),o($VP,[2,112]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:118,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($VP,[2,114]),o($VP,[2,115]),o($VP,[2,116]),o($VP,[2,117]),o($VP,[2,118]),o($VP,[2,119]),o($VP,$VW),o($VP,[2,121]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:119,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:120,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:121,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:122,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:123,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:124,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:125,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o([19,30,32,34,39,42,55,71,73,76,77,78,79,80,83,84,86,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$VX,{87:$VY,89:$VZ}),{30:$V_},o($VP,[2,96]),{19:[1,129]},{18:67,19:$Vk,26:55,30:$Vl,31:130,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{39:[1,131]},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:132,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{33:[1,134],42:[1,133]},{18:67,26:55,30:$Vl,32:[1,135],39:$Vm,52:140,54:136,56:138,58:137,59:139,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($VP,[2,62]),{62:[1,142],63:[1,141]},{83:[1,143]},{84:[1,144]},{18:67,26:55,30:$Vl,31:145,32:$Vk,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{7:146,10:147,27:148,39:[1,149],52:150,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{18:67,26:55,30:$Vl,31:151,32:$Vk,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{18:67,26:55,30:$Vl,31:153,32:[1,154],39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{39:[1,155]},o($Vi,[2,37]),o($Vi,[2,38]),{19:[1,156]},{30:$VV,57:84},o([19,71],[2,85],{55:$VB}),{73:[1,157]},o($V$,$VD),{19:[1,158]},o($Vi,[2,69]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:159,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:160,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($V01,[2,124],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:161,71:[1,162],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:164,71:[1,163],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{30:$V_,71:[1,165]},{71:[1,166]},o($VQ,[2,105],{93:$VR,95:$VS,96:$VT,97:$VU}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:167,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:168,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:169,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{72:[1,170]},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:171,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,32:[1,172],39:$Vm,52:66,58:137,59:139,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,32:[1,173],39:$Vm,52:66,59:105,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($V01,[2,125],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,126],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,127],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,128],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,129],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,130],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,131],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:174,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:175,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:111,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:176,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($Vi,[2,70]),{19:[1,177]},o($V$,[2,91]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,178],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{52:180,53:[1,179],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:181,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{19:$V11,33:[1,183],42:[1,182]},{32:[1,184],55:[1,185]},{32:[1,186],55:$V21},o($V31,[2,50]),o($V41,[2,54],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o([30,32,55,71,76,77,78,79,80,83,84,86,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$VW,{39:$V51}),{18:67,19:$Vk,26:55,30:$Vl,31:189,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{30:[1,190]},o($VP,[2,87]),o($VP,[2,88]),{32:[1,191]},{18:67,19:$Vk,26:55,30:$Vl,31:192,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,19:$Vk,26:55,30:$Vl,31:193,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{71:$Vj},o($VC,$VD,{72:$VE}),{39:$VH,70:98},{32:[1,194]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,195],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{32:[1,196]},{19:[1,197]},{32:[1,198]},o($Vi,[2,64]),{39:[1,199],72:[1,200]},o([2,5,19,29,30,34,35,36,38,39,45,46,47,60,64,68,69,76,77,78,79,80,84,86,99,100,101,102,103,104,105,106,107,108,109,110],[2,80]),o($VQ,[2,103],{93:$VR,95:$VS,96:$VT,97:$VU}),o($VQ,[2,104],{93:$VR,95:$VS,96:$VT,97:$VU}),o($V01,[2,97],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:201,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:202,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($V01,[2,100],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:203,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:204,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($VP,[2,108]),o($VP,[2,109]),o($VP,[2,110]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:205,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,206],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($VP,$V11),o($VP,[2,113]),o($VP,[2,94]),o($VP,[2,95]),o([30,39,71,76,77,78,79,80,83,84,86,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$VX,{32:[1,207],87:$VY,89:$VZ}),o($V61,[2,71]),{71:$V71,72:[1,209]},{33:[1,210]},{33:[1,211]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,212],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{52:214,53:[1,213],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o([33,42],[2,48]),{52:217,56:216,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($VP,[2,52]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:218,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($V31,[2,51]),{19:[1,219]},{32:[1,220]},{33:[1,221]},{19:[1,222]},{19:[1,223]},{33:[1,224]},{35:[1,225],37:[1,226]},{19:[1,227]},o($Vi,[2,59]),{33:[1,228]},{71:[1,229]},{73:[1,230]},o($V01,[2,99],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,98],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,101],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($V01,[2,102],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,231],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($VP,$V81,{72:[1,232]}),o($VP,[2,93]),{18:67,19:$Vk,26:55,30:$Vl,31:233,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:234,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,4:235,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:236,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vi,[2,47]),{33:[1,237]},{33:[1,238]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,239],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($V31,[2,49]),{39:$V51},o($V41,[2,53],{26:55,92:56,94:58,98:60,52:66,18:67,85:75,88:77,59:105,30:$Vl,39:$Vm,71:$VJ,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,86:$VM,90:$VN,91:$VO,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA}),o($Vi,[2,61]),{19:[1,240]},{2:$V0,4:241,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{10:243,18:67,26:55,30:$Vl,31:242,32:$Vk,39:$V91,52:66,59:53,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{10:246,18:67,26:55,30:$Vl,31:245,32:$Vk,39:$V91,52:66,59:53,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,4:247,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{30:[1,248]},{30:[1,249]},o($Vi,[2,58]),{40:250,43:251,44:$Va1},{33:$Vb1,66:254,81:[1,253]},{39:[1,256]},o($VP,[2,111]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:257,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{19:[1,258]},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,259],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,260],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,261],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:262,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vi,[2,57]),o($Vi,[2,60]),{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,264],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{32:[1,265]},{32:[1,266]},o([32,39,55,71,76,77,78,79,80,86,90,91,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110],$VD,{57:84,30:$VV,72:[1,267],83:$VF,84:$VG}),{32:[1,268]},{32:[1,269]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,270],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{18:67,26:55,30:$Vl,31:271,32:$Vk,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{18:67,26:55,30:$Vl,31:272,32:$Vk,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{41:[1,273],43:274,44:$Va1},o($Vc1,[2,35]),{18:67,26:55,30:$Vl,31:275,39:$Vm,42:$Vk,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{52:276,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{19:[1,277]},{18:67,26:55,30:$Vl,39:$Vm,52:66,58:278,59:139,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{71:[1,279]},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,280],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($V61,[2,72]),{71:$Vd1},o($Vi,[2,46]),o($Vi,[2,45]),{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,282],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,283],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vi,[2,39],{48:284,49:[1,285],50:[1,286]}),{33:[1,287]},{33:[1,288]},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:289,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{33:[1,290]},{33:[1,291]},o($Vi,[2,30]),{32:[1,292]},{32:[1,293]},{42:[1,294]},o($Vc1,[2,34]),{42:[1,295]},{72:[1,296]},o($Vi,[2,83]),{34:[1,297],55:$V21},{33:[1,300],67:299,81:[1,298]},o($VP,$Ve1),{18:67,19:$Vk,26:55,30:$Vl,31:301,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($Vi,[2,56]),o($Vi,[2,55]),o($Vi,[2,40],{49:[1,302],50:[1,303]}),{30:[1,304]},{33:[1,305]},{2:$V0,4:306,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:307,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,308],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,4:309,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:310,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{19:[1,311]},{19:[1,312]},{33:[1,313]},{33:[1,314]},{18:67,26:55,30:$Vl,31:315,39:$Vm,52:66,59:53,73:$Vk,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o([19,34,55],[2,67]),{52:316,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{19:[1,317]},{33:$Vb1,65:318,66:319},{19:[1,320]},{30:[1,321]},{33:[1,322]},{18:67,26:55,30:$Vl,31:323,32:$Vk,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,4:324,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,325],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,326],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vf1,$V81,{71:$V71,72:[1,327]}),{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,328],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,329],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vi,[2,31]),o($Vi,[2,32]),{2:$V0,4:330,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,4:331,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{73:[1,332]},{72:[1,333]},o($Vi,[2,84]),{34:[1,334],55:[1,335]},o($Vg1,[2,66]),o($V61,[2,73]),{18:67,26:55,30:$Vl,31:336,32:$Vk,39:$Vm,52:66,59:53,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,4:337,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{32:[1,338]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,339],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vi,[2,26]),o($Vi,[2,28]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:340,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},o($Vi,[2,27]),o($Vi,[2,29]),{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,341],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,342],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{19:[1,343]},{18:67,26:55,30:$Vl,31:344,39:$Vm,52:66,59:53,73:$Vk,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{19:[2,68]},{33:$Vb1,66:345},{32:[1,346]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,347],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{33:[1,348]},o($Vh1,[2,44]),{18:67,26:55,30:$Vl,39:$Vm,52:66,59:105,71:$VJ,73:[1,349],76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,83:$VK,84:$VL,85:75,86:$VM,88:77,90:$VN,91:$VO,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{34:[1,350]},o($Vc1,[2,36]),o($Vi,[2,81]),{73:[1,351]},o($Vg1,[2,65]),{33:[1,352]},o($Vh1,[2,42]),{2:$V0,4:353,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vf1,$Ve1,{71:$Vd1}),o($Vi,[2,33]),{72:[1,354]},{2:$V0,4:355,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,356],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},{18:67,26:55,30:$Vl,31:357,39:$Vm,52:66,59:53,73:$Vk,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh,84:$Vn,85:75,86:$Vo,88:77,92:56,94:58,98:60,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V1,34:[1,358],35:$V2,36:$V3,38:$V4,39:$V5,45:$V6,46:$V7,47:$V8,52:39,60:$V9,64:$Va,68:$Vb,69:$Vc,70:28,76:$Vd,77:$Ve,78:$Vf,79:$Vg,80:$Vh},o($Vh1,[2,43]),{73:[1,359]},o($Vh1,[2,41]),{19:[1,360]},o($Vi,[2,82])],
defaultActions: {45:[2,1],334:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    const {listaenlazada} = require('./listaenlazada.js');
    const {nodo} = require('./nodo.js');
    //const {Literal} = require('./expresiones/literal.js')
    //const {Type} = require('./symbols/type.js');
    //const {Arithmetic} = require('./expresiones/aritmeticas.js');
    //const {Acceso} = require('./expresiones/Acceso.js');
    //const {AritmeticOption} = require('./expresiones/aritmeticOption.js');
    //const {Bloque} = require('./instrucciones/Env')
    //const {Imprimir} = require('./instrucciones/imprimir')
   //const {Sentencia_if} = require('./instrucciones/condicionIf')
    //const {metodo} = require('./instrucciones/metodo')
    //const {llamada} = require('./instrucciones/llamada')
    //const { RelacionalOption } = require("./expresiones/relacionalOptions.js");
    //const { Relacional } = require("./expresiones/relacional.js");
    var array_erroresLexicos;
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 99
break;
case 4:return 102
break;
case 5:return 103
break;
case 6:return 'pr_var'
break;
case 7:return 'pr_let'
break;
case 8:return 75
break;
case 9:return 76
break;
case 10:return 79
break;
case 11:return 80
break;
case 12:return 78
break;
case 13:return 77
break;
case 14:return 68
break;
case 15:return 69
break;
case 16:return 60
break;
case 17:return 35
break;
case 18:return 38
break;
case 19:return 29
break;
case 20:return 36
break;
case 21:return 47
break;
case 22:return 50
break;
case 23:return 49
break;
case 24:return 45
break;
case 25:return 53
break;
case 26:return 'pr_call'
break;
case 27:return 108
break;
case 28:return 44
break;
case 29:return 41
break;
case 30:return 37
break;
case 31:return 46
break;
case 32:return 104
break;
case 33:return 105
break;
case 34:return 106
break;
case 35:return 107
break;
case 36:return 109
break;
case 37:return 110
break;
case 38:return 81
break;
case 39:return 63
break;
case 40:return 62
break;
case 41:return 64
break;
case 42:return 19 
break;
case 43:return 71
break;
case 44:return 42 
break;
case 45:return 83 
break;
case 46:return 84 
break;
case 47:return 93 
break;
case 48:return 95 
break;
case 49:return 55
break;
case 50:return 33 
break;
case 51:return 34 
break;
case 52:return 32 
break;
case 53:return 30 
break;
case 54:return 90
break;
case 55:return 91
break;
case 56:return 89
break;
case 57:return 87
break;
case 58:return 97
break;
case 59:return 86
break;
case 60:return 96
break;
case 61:return 72
break;
case 62:return 73
break;
case 63:return 61
break;
case 64:return 39;
break;
case 65:return 5
break;
case 66: 
        console.log("error lexico :"+yy_.yytext)
        //push para array errores
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+\.?[0-9]*))/i,/^(?:("[^\"]*"))/i,/^(?:('[^']*'))/i,/^(?:var\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:break\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:typeof\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:new\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:;)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\))/i,/^(?:\()/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = arbol_graficado;
exports.Parser = arbol_graficado.Parser;
exports.parse = function () { return arbol_graficado.parse.apply(arbol_graficado, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}