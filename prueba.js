/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var prueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,28],$V2=[1,44],$V3=[1,29],$V4=[1,30],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[1,27],$V9=[1,31],$Va=[1,23],$Vb=[1,24],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[2,5,24,25,29,30,31,33,39,40,41,55,56,57,61,62,63,64,65,66,69,93,94,95,96,97],$Vp=[2,5,19,24,25,27,29,30,31,33,36,39,40,41,55,56,57,61,62,63,64,65,66,69,93,94,95,96,97],$Vq=[25,27,36,51,59,68,69,78,82,83],$Vr=[2,96],$Vs=[2,95],$Vt=[1,64],$Vu=[51,59],$Vv=[2,81],$Vw=[1,66],$Vx=[1,68],$Vy=[1,69],$Vz=[25,27,28,69,93,94,95,96,97],$VA=[19,25,27,36,51,59,68,69,78,79,81,82,83,91],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[19,25,27,36,51,59,68,69,78,79,81,82,83,85,87,88,89,91],$VG=[1,86],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,99],$VQ=[19,27,36],$VR=[1,141],$VS=[1,142],$VT=[1,146],$VU=[1,145],$VV=[1,143],$VW=[1,144],$VX=[19,27,36,79,81],$VY=[2,54],$VZ=[27,51],$V_=[2,5,19,24,25,27,29,30,31,33,36,39,40,41,55,56,57,61,62,63,64,65,66,69,70,71,72,73,74,75,76,78,93,94,95,96,97],$V$=[1,235],$V01=[35,38],$V11=[2,5,19,24,25,27,29,30,31,33,36,39,40,41,43,44,55,56,57,61,62,63,64,65,66,69,93,94,95,96,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"IMPRIMIR":8,"IMPRIMIRLN":9,"ASIGNACION":10,"METODO":11,"FUNCION":12,"METODOsp":13,"FUNCIONsp":14,"CONDICIONIF":15,"CICLO":16,"RETURN":17,"CALL":18,";":19,"SWITCH":20,"BREAK":21,"CONTINUE":22,"AUMENTO":23,"pr_for":24,"(":25,"ETS":26,")":27,"{":28,"}":29,"pr_while":30,"pr_do":31,"pr_until":32,"pr_switch":33,"OPCIONES":34,"pr_default":35,":":36,"OPCION":37,"pr_case":38,"pr_break":39,"pr_continue":40,"pr_if":41,"IFANIDADOS":42,"pr_elif":43,"pr_else":44,"E":45,"PARAMETROS":46,"TIPODATO_DECLARACION":47,"BLOQUE":48,"pr_void":49,"PARS":50,",":51,"PAR":52,"PARAMETROSLL":53,"PARSLL":54,"pr_return":55,"pr_print":56,"pr_println":57,"IDS":58,"=":59,"TIPO_DECLARACION_CONST":60,"pr_const":61,"pr_numero":62,"pr_bool":63,"pr_string":64,"pr_double":65,"pr_char":66,"DECLARACION_INTERNA":67,"+":68,"-":69,"pr_TL":70,"pr_TU":71,"pr_round":72,"pr_len":73,"pr_typeof":74,"pr_TS":75,"pr_TCA":76,"COMPARACIONES":77,"!":78,"&&":79,"COMP":80,"||":81,"<":82,">":83,"Term":84,"*":85,"Factor":86,"/":87,"%":88,"^":89,"[":90,"]":91,"F":92,"expreR_numero":93,"expreR_bool":94,"expreR_cadena":95,"expreR_cadenita":96,"id":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:";",24:"pr_for",25:"(",27:")",28:"{",29:"}",30:"pr_while",31:"pr_do",32:"pr_until",33:"pr_switch",35:"pr_default",36:":",38:"pr_case",39:"pr_break",40:"pr_continue",41:"pr_if",43:"pr_elif",44:"pr_else",48:"BLOQUE",49:"pr_void",51:",",55:"pr_return",56:"pr_print",57:"pr_println",59:"=",61:"pr_const",62:"pr_numero",63:"pr_bool",64:"pr_string",65:"pr_double",66:"pr_char",68:"+",69:"-",70:"pr_TL",71:"pr_TU",72:"pr_round",73:"pr_len",74:"pr_typeof",75:"pr_TS",76:"pr_TCA",78:"!",79:"&&",81:"||",82:"<",83:">",85:"*",87:"/",88:"%",89:"^",90:"[",91:"]",93:"expreR_numero",94:"expreR_bool",95:"expreR_cadena",96:"expreR_cadenita",97:"id"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[16,10],[16,10],[16,7],[16,9],[16,9],[20,12],[34,2],[34,1],[37,6],[21,2],[22,2],[15,7],[15,8],[42,8],[42,5],[42,7],[42,4],[12,7],[11,7],[11,5],[46,3],[50,3],[50,1],[52,2],[53,3],[54,3],[54,1],[14,8],[13,8],[13,6],[17,5],[17,4],[18,2],[18,3],[8,5],[9,5],[10,4],[60,1],[47,1],[47,1],[47,1],[47,1],[47,1],[7,6],[7,5],[67,4],[23,3],[23,3],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,1],[26,1],[26,1],[58,3],[58,1],[77,4],[77,3],[77,3],[77,1],[80,3],[80,4],[80,4],[80,3],[80,4],[80,4],[45,3],[45,3],[45,2],[45,1],[45,1],[45,1],[84,3],[84,3],[84,3],[84,5],[84,1],[86,3],[86,1],[92,1],[92,1],[92,1],[92,1],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
  console.log("s ")
break;
case 3:
 console.log("s ") 
break;
case 4:
 console.log("reconocio declaracion ") 
break;
case 5:
 console.log("reconocio PRINT ") 
break;
case 6:
 console.log("reconocio PRINTLN ") 
break;
case 7:
 console.log("reconocio asignacion ") 
break;
case 8:
  console.log("reconocio metodo")
break;
case 9:
 console.log("reconocio funcion") 
break;
case 10:
  console.log("reconocio metodo sin parametros")
break;
case 11:
 console.log("reconocio funcion sin parametros") 
break;
case 12:
 console.log("reconocio condicion if") 
break;
case 13:
console.log("reconocio  ciclo")
break;
case 14:
console.log("reconocio  RETURN")
break;
case 15:
console.log("reconocio  LLAMADA")
break;
case 16:
console.log("reconocio sentencia SWITCH")
break;
case 17:
console.log("reconocio sentencia BREAK")
break;
case 18:
console.log("reconocio sentencia CONTINUE")
break;
case 19:
console.log("reconocio sentencia AUMENTO")
break;
case 20:
 console.log("Error sintactico en la linea"+(yylineno+1)); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{1:[3]},{2:$V0,5:[1,51],6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vo,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vq,$Vr,{19:[1,53]}),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vq,$Vs,{19:[1,54]}),{19:[1,55]},{47:56,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{18:60,23:59,25:$V2,45:58,58:57,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{25:[1,61]},{25:[1,62]},{51:$Vt,59:[1,63]},o($Vu,$Vv,{46:65,53:67,25:$Vw,68:$Vx,69:$Vy}),{25:[1,70]},{25:[1,71]},{25:[1,72]},{28:[1,73]},{25:[1,74]},{25:[1,75]},{19:[1,76]},{19:[1,77]},o([62,63,64,65,66],[2,58]),o($Vz,[2,59]),o($Vz,[2,60]),o($Vz,[2,61]),o($Vz,[2,62]),o($Vz,[2,63]),{25:$V2,84:78,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VA,[2,97],{85:$VB,87:$VC,88:$VD,89:$VE}),o($VF,[2,102]),{18:60,23:59,25:$V2,45:83,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VF,[2,104]),o($VF,[2,105]),o($VF,[2,106]),o($VF,[2,107]),o($VF,[2,108]),o($VF,[2,109]),{1:[2,1]},o($Vo,[2,2]),o($Vp,[2,15]),o($Vp,[2,19]),o($Vp,[2,20]),{18:60,23:59,25:$V2,45:58,58:84,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{51:$Vt,59:[1,85]},o($Vu,$Vv,{53:67,25:$VG,68:$Vx,69:$Vy}),o($VA,$Vs),o($VA,$Vr),{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:87,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:101,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:102,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:103,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{28:[1,105],36:[1,104]},{18:60,23:59,25:$V2,27:[1,106],45:110,47:111,50:107,52:109,54:108,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VA,[2,53]),{25:$V2,68:[1,112],84:113,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{25:$V2,69:[1,114],84:115,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:116,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{7:117,10:118,18:60,23:59,25:$V2,45:58,47:22,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:119,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:120,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:121,27:[1,122],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:123,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,30]),o($Vp,[2,31]),o($VA,[2,94],{85:$VB,87:$VC,88:$VD,89:$VE}),{25:$V2,86:124,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{25:$V2,86:125,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{25:$V2,86:126,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{90:[1,127]},{25:$VG,27:[1,128],53:67,68:$Vx,69:$Vy},{51:$Vt,59:[1,129]},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:130,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,27:[1,131],45:110,54:108,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,132]},{18:60,23:59,25:$V2,45:83,47:133,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{25:[1,134]},{25:[1,135]},{25:[1,136]},{25:[1,137]},{25:[1,138]},{25:[1,139]},{25:[1,140]},o($VQ,[2,77],{79:$VR,81:$VS}),o([19,27,36,51],[2,78],{46:65,53:67,25:$Vw,59:$VT,68:$Vx,69:$Vy,78:$VU,82:$VV,83:$VW}),o($VQ,[2,79]),{25:[1,147]},o($VX,[2,85]),{27:[1,148]},{19:[1,149]},o($Vu,[2,80],{53:67,25:$VG,68:$Vx,69:$Vy}),{47:151,49:[1,150],62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o([19,25,27,51,59,68,69,78,82,83],$VY,{28:[1,154],36:[1,153]}),{27:[1,155],51:[1,156]},{27:[1,157],51:[1,158]},o($VZ,[2,43]),o($VZ,[2,47],{53:67,25:$VG,68:$Vx,69:$Vy}),{18:60,23:59,25:$V2,45:159,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VA,[2,67]),o($VA,[2,92],{85:$VB,87:$VC,88:$VD,89:$VE}),o($VA,[2,68]),o($VA,[2,93],{85:$VB,87:$VC,88:$VD,89:$VE}),{27:[1,160]},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:161,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:162,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,163]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,164],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,165]},{19:[1,166]},{27:[1,167]},o($VF,[2,98]),o($VF,[2,99]),o($VF,[2,100]),{18:60,23:59,25:$V2,45:168,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VF,[2,103]),{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:169,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{19:[1,170]},o($VA,$VY),{19:[1,171]},{27:[1,172]},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:173,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:174,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:175,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:176,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:177,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:178,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:179,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:181,69:$Vi,80:180,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:181,69:$Vi,80:182,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:183,59:[1,184],69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:186,59:[1,185],69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{59:[1,187]},{59:[1,188]},{18:60,23:59,25:$V2,45:181,69:$Vi,77:189,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{19:[1,190]},o($V_,[2,57]),{28:[1,191]},{28:[1,192]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,193],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{47:195,49:[1,194],62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o([28,36],[2,41]),{47:111,52:197,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($VA,[2,45]),{18:60,23:59,25:$V2,45:198,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VZ,[2,44],{53:67,25:$VG,68:$Vx,69:$Vy}),{28:[1,199]},{19:[1,200]},{19:[1,201]},{28:[1,202]},{30:[1,203],32:[1,204]},{19:[1,205]},o($Vp,[2,52]),{28:[1,206]},{25:$VG,53:67,68:$Vx,69:$Vy,91:[1,207]},{19:[1,208]},o($V_,[2,65]),o($Vp,[2,55]),{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:209,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,210]},{27:[1,211]},{27:[1,212]},{27:[1,213]},{27:[1,214]},{27:[1,215]},{27:[1,216]},o($VX,[2,83]),{25:$VG,53:67,59:$VT,68:$Vx,69:$Vy,78:$VU,82:$VV,83:$VW},o($VX,[2,84]),o($VX,[2,86],{53:67,25:$VG,68:$Vx,69:$Vy}),{18:60,23:59,25:$V2,45:217,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:218,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VX,[2,89],{53:67,25:$VG,68:$Vx,69:$Vy}),{18:60,23:59,25:$V2,45:219,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{18:60,23:59,25:$V2,45:220,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,221],79:$VR,81:$VS},o($Vp,[2,56]),{2:$V0,4:222,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{48:[1,223]},o($Vp,[2,40]),{28:[1,224]},{28:[1,225]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,226],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($VZ,[2,42]),o($VZ,[2,46],{53:67,25:$VG,68:$Vx,69:$Vy}),{2:$V0,4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:228,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:229,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:230,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{25:[1,231]},{25:[1,232]},o($Vp,[2,51]),{34:233,37:234,38:$V$},o($VF,[2,101]),o($V_,[2,64]),o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76]),o($VX,[2,88],{53:67,25:$VG,68:$Vx,69:$Vy}),o($VX,[2,87],{53:67,25:$VG,68:$Vx,69:$Vy}),o($VX,[2,90],{53:67,25:$VG,68:$Vx,69:$Vy}),o($VX,[2,91],{53:67,25:$VG,68:$Vx,69:$Vy}),o($VX,[2,82]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,236],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{29:[1,237]},{2:$V0,4:238,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:239,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,50]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,240],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,241]},{27:[1,242]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,243],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:244,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:245,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{35:[1,246],37:247,38:$V$},o($V01,[2,28]),{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:248,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,39]),o($Vp,[2,38]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,249],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,250],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,32],{42:251,43:[1,252],44:[1,253]}),{28:[1,254]},{28:[1,255]},o($Vp,[2,23]),{27:[1,256]},{27:[1,257]},{36:[1,258]},o($V01,[2,27]),{36:[1,259]},o($Vp,[2,49]),o($Vp,[2,48]),o($Vp,[2,33],{43:[1,260],44:[1,261]}),{25:[1,262]},{28:[1,263]},{2:$V0,4:264,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{19:[1,266]},{19:[1,267]},{28:[1,268]},{28:[1,269]},{25:[1,270]},{28:[1,271]},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:272,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:273,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,274],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,275],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,24]),o($Vp,[2,25]),{2:$V0,4:276,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:277,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:98,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$VH,26:278,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:97,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:96,78:$VP,80:100,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,4:279,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,280]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,281],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,21]),o($Vp,[2,22]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,282],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,283],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{27:[1,284]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,285],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{28:[1,286]},o($V11,[2,37]),{29:[1,287]},o($V01,[2,29]),{28:[1,288]},o($V11,[2,35]),{2:$V0,4:289,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($Vp,[2,26]),{2:$V0,4:290,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,291],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,29:[1,292],30:$V3,31:$V4,33:$V5,39:$V6,40:$V7,41:$V8,45:26,47:22,55:$V9,56:$Va,57:$Vb,58:25,60:21,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,69:$Vi,84:42,86:43,92:45,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn},o($V11,[2,36]),o($V11,[2,34])],
defaultActions: {51:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo en JS
    //importaciones y declaraciones
    //const {Declaracion} = require('./instrucciones/declaracion.js');
    //const {Asignacion} = require('./instrucciones/asignar.js');
    //const {Literal} = require('./expresiones/literal.js')
    //const {Type} = require('./symbols/type.js');
    //const {Arithmetic} = require('./expresiones/aritmeticas.js');
    //const {Acceso} = require('./expresiones/Acceso.js');
    //const {AritmeticOption} = require('./expresiones/aritmeticOption.js');
    //const {Bloque} = require('./instrucciones/Env')
    //const {Imprimir} = require('./instrucciones/imprimir')
   //const {Sentencia_if} = require('./instrucciones/condicionIf')
    //const {metodo} = require('./instrucciones/metodo')
    //const {llamada} = require('./instrucciones/llamada')
    //const { RelacionalOption } = require("./expresiones/relacionalOptions.js");
    //const { Relacional } = require("./expresiones/relacional.js");
    var array_erroresLexicos;
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 93
break;
case 4:return 95
break;
case 5:return 94
break;
case 6:return 96
break;
case 7:return 'pr_var'
break;
case 8:return 'pr_let'
break;
case 9:return 61
break;
case 10:return 62
break;
case 11:return 65
break;
case 12:return 66
break;
case 13:return 64
break;
case 14:return 63
break;
case 15:return 56
break;
case 16:return 57
break;
case 17:return 55
break;
case 18:return 30
break;
case 19:return 33
break;
case 20:return 24
break;
case 21:return 31
break;
case 22:return 41
break;
case 23:return 44
break;
case 24:return 43
break;
case 25:return 39
break;
case 26:return 49
break;
case 27:return 'pr_call'
break;
case 28:return 74
break;
case 29:return 38
break;
case 30:return 35
break;
case 31:return 32
break;
case 32:return 40
break;
case 33:return 70
break;
case 34:return 71
break;
case 35:return 72
break;
case 36:return 73
break;
case 37:return 75
break;
case 38:return 76
break;
case 39:return 19 
break;
case 40:return 59
break;
case 41:return 36 
break;
case 42:return 68 
break;
case 43:return 69 
break;
case 44:return 85 
break;
case 45:return 87 
break;
case 46:return 51
break;
case 47:return 28 
break;
case 48:return 29 
break;
case 49:return 27 
break;
case 50:return 25 
break;
case 51:return 82
break;
case 52:return 83
break;
case 53:return 81
break;
case 54:return 79
break;
case 55:return 89
break;
case 56:return 78
break;
case 57:return 88
break;
case 58:return '<='
break;
case 59:return '>='
break;
case 60:return '=='
break;
case 61:return '!='
break;
case 62:return 90
break;
case 63:return 91
break;
case 64:return 97;
break;
case 65:return 5
break;
case 66: 
        console.log("error lexico :"+yy_.yytext)
        //push para array errores
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+\.?[0-9]*))/i,/^(?:("[^\"]*"))/i,/^(?:(true|false\b))/i,/^(?:('[^']*'))/i,/^(?:var\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:break\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:typeof\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:;)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\))/i,/^(?:\()/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = prueba;
exports.Parser = prueba.Parser;
exports.parse = function () { return prueba.parse.apply(prueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}